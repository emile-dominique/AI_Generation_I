//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//+++ARTIFICIAL INTELLIGENCE INNOVATIONS - BY EMILE DOMINIQUE+++//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//



//+++LIBRARIES+++//
import java.io.*;
import java.util.*;
import java.time.LocalTime;
import java.time.LocalDate;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.*;
//---------------//




















public class Main
{
	public static void main(String[] args) throws FileNotFoundException, IOException
	{
		
		
		
		
		
		//+++++++++++++++++++++++++++//
		//+++CORE PROGRAM SETTINGS+++//
		//+++++++++++++++++++++++++++//
		
		//+++AI VERSION+++//
		String VERSION="56F";
		
		
		//+++DEVELOPMENT MODE+++//
		String DEVELOPMENT_MODE="OFF";
		
		
		//+++CHAT MODE+++//
		String CHAT_MODE="OFF";
		
		
		//+++MANUAL CHAT MODE+++//
		String MANUAL_CHAT_MODE="OFF";
		
		
		//+++TIME AND DATE INITIALIZATION+++//
		LocalTime TIME=LocalTime.now();
		LocalDate DATE=LocalDate.now();
		
		

		
		//+++++++++++++++//
		//+++ALPHABETS+++//
		//+++++++++++++++//
		
		String A_LC="a";
		String B_LC="b";
		String C_LC="c";
		String D_LC="d";
		String E_LC="e";
		String F_LC="f";
		String G_LC="g";
		String H_LC="h";
		String I_LC="i";
		String J_LC="j";
		String K_LC="k";
		String L_LC="l";
		String M_LC="m";
		String N_LC="n";
		String O_LC="o";
		String P_LC="p";
		String Q_LC="q";
		String R_LC="r";
		String S_LC="s";
		String T_LC="t";
		String U_LC="u";
		String V_LC="v";
		String W_LC="w";
		String X_LC="x";
		String Y_LC="y";
		String Z_LC="z";
		
		String A_UC="A"; 
		String B_UC="B";
		String C_UC="C";
		String D_UC="D";
		String E_UC="E";
		String F_UC="F";
		String G_UC="G";
		String H_UC="H";
		String I_UC="I";
		String J_UC="J";
		String K_UC="K";
		String L_UC="L";
		String M_UC="M";
		String N_UC="N";
		String O_UC="O";
		String P_UC="P";
		String Q_UC="Q";
		String R_UC="R";
		String S_UC="S";
		String T_UC="T";
		String U_UC="U";
		String V_UC="V";
		String W_UC="W";
		String X_UC="X";
		String Y_UC="Y";
		String Z_UC="Z";
		
		//+++NUMBERS+++//
		String NUMBER_0_STRING="0";
		String NUMBER_1_STRING="1";
		String NUMBER_2_STRING="2";
		String NUMBER_3_STRING="3";
		String NUMBER_4_STRING="4";
		String NUMBER_5_STRING="5";
		String NUMBER_6_STRING="6";
		String NUMBER_7_STRING="7";
		String NUMBER_8_STRING="8";
		String NUMBER_9_STRING="9";
		
		//+++DECLARE VARIABLES+++//
		String DATA="";
		String DATA_TYPE="";
		String UNALTERED_DATA="";
		String WHAT_IS_THE_MEANING_OF="";
		String DIFFERENCE_BETWEEN="";
		String WHAT_IS_THE_DIFFERENCE_BETWEEN="";
		String WHAT_IS="";
		String AND_UC="AND";
		String AND_LC="and";
		String SPACE=" ";
		String ENTER="\n";
		String THE_UC="THE";
		String THE_LC="the";
		String PERIOD=".";
		String COMMA=",";
		String QUESTION_MARK="?";
		String QUESTION_TYPE="";
		String DETECT_3_CHARS="";
		String DICTIONARY_DESCRIBE_PATH="";
		String DICTIONARY_DESCRIBE="";
		String SINGLE_DEFINITION_OBJECT="";
		String SINGLE_DEFINITION_OBJECT_CAPITALIZED="";
		int SINGLE_DEFINITION_OBJECT_LENGTH=0;
		int SINGLE_DEFINITION_OBJECT_CAPITALIZED_LENGTH=0;
		String DICTIONARY_MODE="";
		String DICTIONARY_DEFINE="";
		String DICTIONARY_DATA="";
		String DICTIONARY_DATA_BREAKPOINT="";
		String CORRECT_WORD="";
		String DETECT_WORD="";
		String DETECT_BREAKPOINT="";
		String STRIPPED_TERM_DATA="";
		
		String RECYCABLE_STRING_1="";
		String RECYCABLE_STRING_2="";
		String RECYCABLE_STRING_3="";
		String RECYCABLE_STRING_4="";
		String RECYCABLE_STRING_5="";
		String RECYCABLE_STRING_6="";
		String RECYCABLE_STRING_7="";
		String RECYCABLE_STRING_8="";
		String RECYCABLE_STRING_9="";
		String RECYCABLE_STRING_10="";
		String RECYCABLE_STRING_11="";
		String RECYCABLE_STRING_12="";
		String RECYCABLE_STRING_13="";
		String RECYCABLE_STRING_14="";
		String RECYCABLE_STRING_15="";
		String RECYCABLE_STRING_16="";
		String RECYCABLE_STRING_17="";
		String RECYCABLE_STRING_18="";
		String RECYCABLE_STRING_19="";
		String RECYCABLE_STRING_20="";	
		String RECYCABLE_STRING_21="";
		String RECYCABLE_STRING_22="";
		String RECYCABLE_STRING_23="";
		String RECYCABLE_STRING_24="";
		String RECYCABLE_STRING_25="";
		String RECYCABLE_STRING_26="";
		String RECYCABLE_STRING_27="";
		String RECYCABLE_STRING_28="";
		String RECYCABLE_STRING_29="";
		String RECYCABLE_STRING_30="";
		String RECYCABLE_STRING_31="";
		String RECYCABLE_STRING_32="";
		String RECYCABLE_STRING_33="";
		String RECYCABLE_STRING_34="";
		String RECYCABLE_STRING_35="";
		String RECYCABLE_STRING_36="";
		String RECYCABLE_STRING_37="";
		String RECYCABLE_STRING_38="";
		String RECYCABLE_STRING_39="";
		String RECYCABLE_STRING_40="";
		String RECYCABLE_STRING_41="";
		String RECYCABLE_STRING_42="";
		String RECYCABLE_STRING_43="";
		String RECYCABLE_STRING_44="";
		String RECYCABLE_STRING_45="";
		String RECYCABLE_STRING_46="";
		String RECYCABLE_STRING_47="";
		String RECYCABLE_STRING_48="";
		String RECYCABLE_STRING_49="";
		String RECYCABLE_STRING_50="";
		
		
		String DETECT_1_CHAR="";
		String WORD_1=""; 
		String WORD_2="";
		String WORD_3="";
		String WORD_4="";
		String WORD_5=""; 
		String WORD_6="";
		String WORD_7="";
		String WORD_8="";
		String WORD_9=""; 
		String WORD_10="";
		String WORD_11="";
		String WORD_12="";
		String WORD_13=""; 
		String WORD_14="";
		String WORD_15="";
		String WORD_16="";
		String WORD_17=""; 
		String WORD_18="";
		String WORD_19="";
		String WORD_20="";
		String WORD_21=""; 
		String WORD_22="";
		String WORD_23="";
		String WORD_24="";
		String WORD_25=""; 
		String WORD_26="";
		String WORD_27="";
		String WORD_28="";
		String WORD_29=""; 
		String WORD_30="";
		String WORD_31="";
		String WORD_32="";
		String WORD_33=""; 
		String WORD_34="";
		String WORD_35="";
		
		String IS_AND_DETECTED="";
		String CAPITALIZED_WORD="";
		String DATA_CAPITALIZED="";
			
		String XXWORD_1="";
		String UNRECOGNIZED_CHARACTERS="";
		String UNRECOGNIZED_CHARACTERS_DETECTED="";
		
		String PRE_DATA_TYPE="";
		String AI_MEMORY_DATA="";
		String AI_MEMORY_DATA_TO_WRITE="";
		String AI_MEMORY_ORDER_NUMBER_STRING="";
		
		String COMBINED_TEXT_DATABASE_DATA="";
		String PROGRAMMING_DATA_STRING_VARIABLE_1="";
		String PROGRAMMING_DATA_STRING_VARIABLE_2="";
		String PROGRAMMING_DATA_STRING_VARIABLE_3="";
		String PROGRAMMING_DATA_STRING_VARIABLE_4="";
		String PROGRAMMING_DATA_STRING_VARIABLE_5="";
		String PROGRAMMING_DATA_STRING_VARIABLE_6="";
		String PROGRAMMING_DATA_STRING_VARIABLE_7="";
		String PROGRAMMING_DATA_STRING_VARIABLE_8="";
		String PROGRAMMING_DATA_STRING_VARIABLE_9="";
		String PROGRAMMING_DATA_STRING_VARIABLE_10="";
		String PROGRAMMING_DATA_STRING_VARIABLE_11="";
		String PROGRAMMING_DATA_STRING_VARIABLE_12="";
		String PROGRAMMING_DATA_STRING_VARIABLE_13="";
		String PROGRAMMING_DATA_STRING_VARIABLE_14="";
		String PROGRAMMING_DATA_STRING_VARIABLE_15="";
		String PROGRAMMING_DATA_STRING_VARIABLE_16="";
		String PROGRAMMING_DATA_STRING_VARIABLE_17="";
		String PROGRAMMING_DATA_STRING_VARIABLE_18="";
		String PROGRAMMING_DATA_STRING_VARIABLE_19="";
		String PROGRAMMING_DATA_STRING_VARIABLE_20="";
		String PROGRAMMING_DATA_STRING_VARIABLE_21="";
		String PROGRAMMING_DATA_STRING_VARIABLE_22="";
		String PROGRAMMING_DATA_STRING_VARIABLE_23="";
		String PROGRAMMING_DATA_STRING_VARIABLE_24="";
		String PROGRAMMING_DATA_STRING_VARIABLE_25="";
		String PROGRAMMING_DATA_STRING_VARIABLE_26="";
		String PROGRAMMING_DATA_STRING_VARIABLE_27="";
		String PROGRAMMING_DATA_STRING_VARIABLE_28="";
		String PROGRAMMING_DATA_STRING_VARIABLE_29="";
		String PROGRAMMING_DATA_STRING_VARIABLE_30="";
		String PROGRAMMING_DATA_STRING_VARIABLE_31="";
		String PROGRAMMING_DATA_STRING_VARIABLE_32="";
		String PROGRAMMING_DATA_STRING_VARIABLE_33="";
		String PROGRAMMING_DATA_STRING_VARIABLE_34="";
		String PROGRAMMING_DATA_STRING_VARIABLE_35="";


		String PLURAL_USE_1="IES";
		String PLURAL_USE_2="S";
		String PLURAL_USE_3="'S";
		String PLURAL_USE_4="S'";
		String PLURAL_USE_5="ES";
		String PLURAL_USE_6="ES'";

		
		
		//+++COMPREHENSION STRINGS+++//
		
		String IS_WORD_1_A_SUBJECT="";
		String IS_WORD_1_A_VERB="";
		String SENTENCE_TOPIC="";
		String USER_INTENT="";
		String IS_A_ANSWER_WARRANTED="";
		String HAS_ANSWER_BEEN_FOUND="";
		String IS_DATA_DETERMINABLE="";
		String SENTENCE_DATA_1="";
		String SENTENCE_DATA_2="";
		String SENTENCE_DATA_3="";
		String SENTENCE_DATA_4="";
		String SENTENCE_DATA_5="";
		String REASONING_CONCLUSION="";
		String REASONING_DATA_1="";
		String REASONING_DATA_2="";
		String REASONING_DATA_3="";
		String REASONING_DATA_4="";
		String REASONING_DATA_5="";
		
		//+++SENTENCE STRUCTURE+++//
		String VERB_1="";
		String VERB_2="";
		String VERB_3="";
		String SUBJECT_1="";
		String QUESTION_WORD="";
		String QUESTION_VERB="";
		String VERB_TENSE="";
		String ADDITIONAL_SENTENCE_INFORMATION="";
		String WORD_COUNT_STRING="";
		String FILE_NAME="";
		
		
		
		//+++AI RESOURCE FOLDERS+++//
		
		String AI_FOLDER_DIRECTORY="";
		String AI_LIBRARY_FOLDER_DIRECTORY="";
		String AI_UPDATE_FOLDER_DIRECTORY="";
		String AI_MEMORY_FOLDER_DIRECTORY="";
		String AI_FILE_DIRECTORY="";
		String AI_TEXT_DATABASE_FILE_DIRECTORY="";
		String TEXT_DATABASE_DATA="";
		String AI_TEXT_VARIABLE_PROGRAMMING_FILE_DIRECTORY="";
		String AI_MEMORY_COUNT_FILE_DIRECTORY="";
		String AI_MEMORY_FILE_DIRECTORY="";
		String ANDROID_DIRECTORY="";
        String WINDOWS_DIRECTORY="";
        String OPERATING_SYSTEM_DETECTED="";
        String IS_OPERATING_SYSTEM_WINDOWS="";
        String IS_OPERATING_SYSTEM_ANDROID="";
		
		//+++TURBOCHARGED VARIABLES+++//
		String DATA_PROCESSING_FOLDER_DIRECTORY="";
		String WORDS_FOLDER_DIRECTORY="";
		String WORD_LENGTHS_FOLDER_DIRECTORY="";
		String WORD_PROCESSING_FOLDER_1="";
		String WORD_PROCESSING_FOLDER_2="";
		String WORD_PROCESSING_FOLDER_3="";
		String WORD_PROCESSING_FOLDER_4="";
		String WORD_PROCESSING_FOLDER_5="";
		String WORD="";
		String XWORD="";
		String XXWORD="";
		String FILE_DIRECTORY="";
		String XWORD_LENGTH_STRING="";
		String XXWORD_LENGTH_STRING="";
		
		//+++LIBRARY VARIABLES+++//
		String AI_LIBRARY_NAME="";
		String AI_LIBRARY_TERMS="";
		String AI_LIBRARY_MAIN_CATEGORY="";
		String AI_LIBRARY_SUB_CATEGORY="";
		String AI_LIBRARY_TERM_FILE_DIRECTORY="";
		String AI_LIBRARY_MAIN_CATEGORY_FILE_DIRECTORY="";
		String CURRENT_AI_LIBRARY_FOLDER="";
		String LIBRARY_DETECT_TERMS_FILE_NAME="";
		String LIBRARY_TERMS_PARTIAL_FILE_NAME_FOR_DETECTION="";
		String LIBRARY_TERMS_FULL_FILE_NAME_FOR_DETECTION="";
		String LIBRARY_DETECT_SUBCATEGORY_FILE_NAME="";
		String LIBRARY_DETECT_SUBCATEGORY_PARTIAL_FILE_NAME="";
		String LIBRARY_DETECT_SUBCATEGORY_FULL_FILE_NAME="";
		String LIBRARY_CURRENT_TERM="";
		String WORD_MAIN_CLASSIFICATION_FILE_NAME="";
		String WORD_MAIN_CLASSIFICATION_FILE_PATH="";
		String WORD_SUB_CLASSIFICATION_FILE_NAME="";
		String WORD_SUB_CLASSIFICATION_FILE_PATH="";
		String LIBRARY_TERM_MATCH="";
		
		String LIBRARY_STRING_1="";
		String LIBRARY_STRING_2="";
		String LIBRARY_STRING_3="";
		String LIBRARY_STRING_4="";
		String LIBRARY_STRING_5="";
		String LIBRARY_STRING_6="";
		String LIBRARY_STRING_7="";
		String LIBRARY_STRING_8="";
		String LIBRARY_STRING_9="";
		String LIBRARY_STRING_10="";
		
		String WORD_FILE_DIRECTORY="";
		String WORD_FILE_NAME="";
		
		
		//+++LIBRARY NUMERIC VALUES+++//
		int LIBRARY_LOOP_1=0;
		int LIBRARY_LOOP_2=0;
		int LIBRARY_LOOP_3=0;
		int LIBRARY_LOOP_4=0;
		int LIBRARY_LOOP_5=0;
		int LIBRARY_LOOP_6=0;
		int LIBRARY_LOOP_7=0;
		int LIBRARY_LOOP_8=0;
		int LIBRARY_LOOP_9=0;
		int LIBRARY_LOOP_10=0;
		
		int LIBRARY_SUBCATEGORY_FILE_COUNT=0;
		int LIBRARY_TERMS_FILE_COUNT=0;
		
		int LIBRARY_NUMBER_1=0;
		int LIBRARY_NUMBER_2=0;
		int LIBRARY_NUMBER_3=0;
		int LIBRARY_NUMBER_4=0;
		int LIBRARY_NUMBER_5=0;
		int LIBRARY_NUMBER_6=0;
		int LIBRARY_NUMBER_7=0;
		int LIBRARY_NUMBER_8=0;
		int LIBRARY_NUMBER_9=0;
		int LIBRARY_NUMBER_10=0;
		int LIBRARY_NUMBER_11=0;
		int LIBRARY_NUMBER_12=0;
		int LIBRARY_NUMBER_13=0;
		int LIBRARY_NUMBER_14=0;
		int LIBRARY_NUMBER_15=0;
		int LIBRARY_NUMBER_16=0;
		int LIBRARY_NUMBER_17=0;
		int LIBRARY_NUMBER_18=0;
		int LIBRARY_NUMBER_19=0;
		int LIBRARY_NUMBER_20=0;
		
		//+++CONSOLE UTILITIES+++//
		String CONSOLE_SPACER_2=ENTER;
		String CONSOLE_SPACER_4=ENTER+ENTER+ENTER;
		String CONSOLE_SPACER_8=ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER;
		String CONSOLE_SPACER_16=ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER;
		String CONSOLE_SPACER_32=ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER+ENTER;
		
		//+++WINDOWS FILE SYSTEM+++//
		String WINDOWS_FILE_SYSTEM_PATH_1="";
		String WINDOWS_FILE_SYSTEM_PATH_2="";
		String WINDOWS_FILE_SYSTEM_PATH_3="";
		String WINDOWS_FILE_SYSTEM_PATH_4="";
		String WINDOWS_FILE_SYSTEM_PATH_5="";
		String WINDOWS_FILE_SYSTEM_PATH_6="";
		String WINDOWS_FILE_SYSTEM_PATH_7="";
		
		String WINDOWS_FILE_SYSTEM_PATH_8="";
		String WINDOWS_FILE_SYSTEM_PATH_9="";
		String WINDOWS_FILE_SYSTEM_PATH_10="";
		String WINDOWS_FILE_SYSTEM_PATH_11="";
		String WINDOWS_FILE_SYSTEM_PATH_12="";
		String WINDOWS_FILE_SYSTEM_PATH_13="";
		String WINDOWS_FILE_SYSTEM_PATH_14="";
		
		//+++RANDOM+++//
		
		String WORD_MAIN_CLASSIFICATION="";
		String WORD_SUB_CLASSIFICATION="";
		
		//+++PROGRAM BACKUP VARIABLES+++//
		String AI_AUTO_BACKUP="";
		String AI_BACKUP_COUNT_STRING="";
		String AI_BACKUP_COUNT_FILE_DIRECTORY="";
		String AI_BACKUP_FOLDER_DIRECTORY="";
		String OLD_BACKUP_COUNT_STRING="";
		String NEW_BACKUP_FOLDER_NAME="";
		String SOURCE_FILE_DIRECTORY="";
		String DESTINATION_FILE_DIRECTORY="";
		String UPDATED_BACKUP_COUNT_STRING="";
		String SOURCE_CODE="";
		int OLD_BACKUP_COUNT=0;
		int UPDATED_BACKUP_COUNT=0;
		
		String AI_LIBRARY_SUBCATEGORY_FOLDER_DIRECTORY="";
		String AI_LIBRARY_SUBCATEGORY_TERMS_FILE_DIRECTORY="";
		String CURRENT_FILE="";
		String AI_LIBRARY_CURRENT_SUBCATEGORY="";
		String AI_LIBRARY_SUBCATEGORY_FILE_DIRECTORY="";
		String FILE_COUNT_STRING="";
		String FOLDER_COUNT_STRING="";
		String FILE_NAME_1="";
		String FILE_NAME_2="";
		String FILE_NAME_3="";
		String FILE_NAME_4="";
		String FILE_NAME_5="";
		String FILE_NAME_6="";
		String FILE_NAME_7="";
		String FILE_NAME_8="";
		String FILE_NAME_9="";
		String FILE_NAME_10="";
		
		String FOLDER_NAME_1="";
		String FOLDER_NAME_2="";
		String FOLDER_NAME_3="";
		String FOLDER_NAME_4="";
		String FOLDER_NAME_5="";
		String FOLDER_NAME_6="";
		String FOLDER_NAME_7="";
		String FOLDER_NAME_8="";
		String FOLDER_NAME_9="";
		String FOLDER_NAME_10="";
		
		String FILE_1_DIRECTORY="";
		String FILE_2_DIRECTORY="";
		String FILE_3_DIRECTORY="";
		String FILE_4_DIRECTORY="";
		String FILE_5_DIRECTORY="";
		String FILE_6_DIRECTORY="";
		String FILE_7_DIRECTORY="";
		String FILE_8_DIRECTORY="";
		String FILE_9_DIRECTORY="";
		String FILE_10_DIRECTORY="";
		
		String FOLDER_1_DIRECTORY="";
		String FOLDER_2_DIRECTORY="";
		String FOLDER_3_DIRECTORY="";
		String FOLDER_4_DIRECTORY="";
		String FOLDER_5_DIRECTORY="";
		String FOLDER_6_DIRECTORY="";
		String FOLDER_7_DIRECTORY="";
		String FOLDER_8_DIRECTORY="";
		String FOLDER_9_DIRECTORY="";
		String FOLDER_10_DIRECTORY="";
		
		String IS_FILE_1_EMPTY="";
		String IS_FILE_2_EMPTY="";
		String IS_FILE_3_EMPTY="";
		String IS_FILE_4_EMPTY="";
		String IS_FILE_5_EMPTY="";
		String IS_FILE_6_EMPTY="";
		String IS_FILE_7_EMPTY="";
		String IS_FILE_8_EMPTY="";
		String IS_FILE_9_EMPTY="";
		String IS_FILE_10_EMPTY="";
		
		String FILE_1_DATA="";
		String FILE_2_DATA="";
		String FILE_3_DATA="";
		String FILE_4_DATA="";
		String FILE_5_DATA="";
		String FILE_6_DATA="";
		String FILE_7_DATA="";
		String FILE_8_DATA="";
		String FILE_9_DATA="";
		String FILE_10_DATA="";
		
		String CURRENT_FILE_2="";
		String CURRENT_FILE_3="";
		String CURRENT_FILE_4="";
		String CURRENT_FILE_5="";
		
		String DIRECTORY_1="";
		String DIRECTORY_2="";
		String DIRECTORY_3="";
		String DIRECTORY_4="";
		String DIRECTORY_5="";
		String DIRECTORY_6="";
		String DIRECTORY_7="";
		String DIRECTORY_8="";
		String DIRECTORY_9="";
		String DIRECTORY_10="";
		
		String DID_LIBRARY_PASS_VERIFICATION="";
		String IS_LIBRARY_CORRUPTED="";
		String DID_ALL_LIBRARIES_PASS_VERIFICATION="";
		
		//+++REASONING SUMMARY VARIABLES+++//
		
		String COMPLETE_REASONING_SUMMARY="";
		String PRE_REASONING_SUMMARY_1="";
		String PRE_REASONING_SUMMARY_2="";
		String PRE_REASONING_SUMMARY_3="";
		String PRE_REASONING_SUMMARY_4="";
		String PRE_REASONING_SUMMARY_5="";
		String PRE_REASONING_SUMMARY_6="";
		String PRE_REASONING_SUMMARY_7="";
		String PRE_REASONING_SUMMARY_8="";
		String PRE_REASONING_SUMMARY_9="";
		String PRE_REASONING_SUMMARY_10="";
		
		String REASONING_STRING_1="";
		String REASONING_STRING_2="";
		String REASONING_STRING_3="";
		String REASONING_STRING_4="";
		String REASONING_STRING_5="";
		String REASONING_STRING_6="";
		String REASONING_STRING_7="";
		String REASONING_STRING_8="";
		String REASONING_STRING_9="";
		String REASONING_STRING_10="";
		
		int REASONING_STRING_1_LENGTH=0;
		int REASONING_STRING_2_LENGTH=0;
		int REASONING_STRING_3_LENGTH=0;
		int REASONING_STRING_4_LENGTH=0;
		int REASONING_STRING_5_LENGTH=0;
		int REASONING_STRING_6_LENGTH=0;
		int REASONING_STRING_7_LENGTH=0;
		int REASONING_STRING_8_LENGTH=0;
		int REASONING_STRING_9_LENGTH=0;
		int REASONING_STRING_10_LENGTH=0;
		
		String DID_CHARACTERS_PASS_VERIFICATION="";
		
		//+++INTERACTIVE SESSION VARIABLES+++//
		
		String INTERACTIVE_FOLDER_DIRECTORY="";
		String INTERACTIVE_STATEMENT_FILE_DIRECTORY="";
		String INTERACTIVE_REPLY_FILE_DIRECTORY="";
		String CURRENT_INTERACTIVE_SESSION_FOLDER_DIRECTORY="";
		String INTERACTIVE_STATEMENT_DATA="";
		String INTERACTIVE_REPLY_DATA="";
		String IS_INTERACTIVE_FILE_COUNT_CORRECT="";
		String INTERACTIVE_STATEMENT_FILE_NAME="";
		String INTERACTIVE_REPLY_FILE_NAME="";
		String CHAT_DATA="";
		String CORRECTED_INTERACTIVE_REPLY_DATA="";
		
		int CHAT_DATA_LENGTH=0;
		int TOTAL_INTERACTIVE_FILES_DIVIDED=0;
		int TOTAL_INTERACTIVE_REPLIES=0;
		int TOTAL_INTERACTIVE_STATEMENTS=0;
		int TOTAL_INTERACTIVE_FILES=0;
		int TOTAL_INTERACTIVE_SESSIONS=0;
		int INTERACTIVE_STATEMENT_DATA_LENGTH=0;
		
		//-----------------------------------//
		
		String INTENTION="";
		String USER_INTENTION="";
		String DISCERNED_USER_INTENTION="";
		String INTENTION_STRING_1="";
		String INTENTION_STRING_2="";
		String INTENTION_STRING_3="";
		String INTENTION_STRING_4="";
		String INTENTION_STRING_5="";
		String INTENTION_STRING_6="";
		String INTNETION_STRING_7="";
		String INTENTION_STRING_8="";
		String INTENTION_STRING_9="";
		String INTENTION_STRING_10="";
		
		int INTENTION_NUMBER_1=0;
		int INTENTION_NUMBER_2=0;
		int INTENTION_NUMBER_3=0;
		int INTENTION_NUMBER_4=0;
		int INTENTION_NUMBER_5=0;
		int INTENTION_NUMBER_6=0;
		int INTENTION_NUMBER_7=0;
		int INTENTION_NUMBER_8=0;
		int INTENTION_NUMBER_9=0;
		int INTENTION_NUMBER_10=0;
		
		
		
		int COMPLETE_REASONING_SUMMARY_LENGTH=0;
		
		int PRE_REASONING_SUMMARY_1_LENGTH=0;
		int PRE_REASONING_SUMMARY_2_LENGTH=0;
		int PRE_REASONING_SUMMARY_3_LENGTH=0;
		int PRE_REASONING_SUMMARY_4_LENGTH=0;
		int PRE_REASONING_SUMMARY_5_LENGTH=0;
		int PRE_REASONING_SUMMARY_6_LENGTH=0;
		int PRE_REASONING_SUMMARY_7_LENGTH=0;
		int PRE_REASONING_SUMMARY_8_LENGTH=0;
		int PRE_REASONING_SUMMARY_9_LENGTH=0;
		int PRE_REASONING_SUMMARY_10_LENGTH=0;
		
		int REASONING_NUMBER_1=0;
		int REASONING_NUMBER_2=0;
		int REASONING_NUMBER_3=0;
		int REASONING_NUMBER_4=0;
		int REASONING_NUMBER_5=0;
		int REASONING_NUMBER_6=0;
		int REASONING_NUMBER_7=0;
		int REASONING_NUMBER_8=0;
		int REASONING_NUMBER_9=0;
		int REASONING_NUMBER_10=0;
		
		String REASONING_FILE_DIRECTORY="";
		String REASONING_FOLDER_DIRECTORY="";
		String REASONING_DATA_FROM_FILE="";
		String WRONG_CHARACTERS_COMBINED="";
		
		String AI_LEARNED_MEMORY_DIRECTORY="";
		String AI_EXAMPLES_DIRECTORY="";
		
		
		//+++INTEGERS+++//
		int DICTIONARY_DESCRIBE_LENGTH=0;
		int DICTIONARY_DEFINE_LENGTH=0;
		int A=0;
		int B=0;
		int C=0;
		int D=0;
		int E=0;
		int F=0;
		int G=0;
		int H=0;
		int I=0;
		int J=0;
		int K=0;
		int L=0;
		
		int VALUE_1=0;
		int TOTAL_WORD_COUNT=0;
		int CALC_1=0;
		int CALC_2=0;
		int DATA_LENGTH=0;
		int PROCESSED_WORD_COUNT=0;
		int DETECT_WORD_LENGTH=0;
		int SINGLE_DEFINITION_QUESTION_OBJECT_LENGTH=0;
		int VAR_LOCK_1=0;
		int VAR_LOCK_2=0;
		int T1=0;
		int T2=0;
		int STRIPPED_TERM_DATA_LENGTH=0;
		int TOTAL_SPACE_COUNT=0;
		int OBJECT_COUNT=0;
		int CONTRASTING_QUESTION_OBJECT_COUNT=0;
		
		
		
		
		int WORD_1_LENGTH=0;
		int WORD_2_LENGTH=0;
		int WORD_3_LENGTH=0;
		int WORD_4_LENGTH=0;
		int WORD_5_LENGTH=0;
		int WORD_6_LENGTH=0;
		int WORD_7_LENGTH=0;
		int WORD_8_LENGTH=0;
		int WORD_9_LENGTH=0;
		int WORD_10_LENGTH=0;
		int WORD_11_LENGTH=0;
		int WORD_12_LENGTH=0;
		int WORD_13_LENGTH=0;
		int WORD_14_LENGTH=0;
		int WORD_15_LENGTH=0;
		int WORD_16_LENGTH=0;
		int WORD_17_LENGTH=0;
		int WORD_18_LENGTH=0;
		int WORD_19_LENGTH=0;
		int WORD_20_LENGTH=0;
		int WORD_21_LENGTH=0;
		int WORD_22_LENGTH=0;
		int WORD_23_LENGTH=0;
		int WORD_24_LENGTH=0;
		int WORD_25_LENGTH=0;
		int WORD_26_LENGTH=0;
		int WORD_27_LENGTH=0;
		int WORD_28_LENGTH=0;
		int WORD_29_LENGTH=0;
		int WORD_30_LENGTH=0;
		int WORD_31_LENGTH=0;
		int WORD_32_LENGTH=0;
		int WORD_33_LENGTH=0;
		int WORD_34_LENGTH=0;
		int WORD_35_LENGTH=0;
		
		
		
		int CONTRASTING_WORD_1_LENGTH=0;
		int CONTRASTING_WORD_2_LENGTH=0;
		int CONTRASTING_WORD_3_LENGTH=0;
		int CONTRASTING_WORD_4_LENGTH=0;
		int CONTRASTING_WORD_5_LENGTH=0;
		int CONTRASTING_WORD_6_LENGTH=0;
		int CONTRASTING_WORD_7_LENGTH=0;
		int CONTRASTING_WORD_8_LENGTH=0;
		int CONTRASTING_WORD_9_LENGTH=0;
		int CONTRASTING_WORD_10_LENGTH=0;
		int CONTRASTING_WORD_11_LENGTH=0;
		int CONTRASTING_WORD_12_LENGTH=0;
		int CONTRASTING_WORD_13_LENGTH=0;
		int CONTRASTING_WORD_14_LENGTH=0;
		int CONTRASTING_WORD_15_LENGTH=0;
		int CONTRASTING_WORD_16_LENGTH=0;
		int CONTRASTING_WORD_17_LENGTH=0;
		int CONTRASTING_WORD_18_LENGTH=0;
		int CONTRASTING_WORD_19_LENGTH=0;
		int CONTRASTING_WORD_20_LENGTH=0;
		int CONTRASTING_WORD_21_LENGTH=0;
		int CONTRASTING_WORD_22_LENGTH=0;
		int CONTRASTING_WORD_23_LENGTH=0;
		int CONTRASTING_WORD_24_LENGTH=0;
		int CONTRASTING_WORD_25_LENGTH=0;
		int CONTRASTING_WORD_26_LENGTH=0;
		int CONTRASTING_WORD_27_LENGTH=0;
		int CONTRASTING_WORD_28_LENGTH=0;
		int CONTRASTING_WORD_29_LENGTH=0;
		int CONTRASTING_WORD_30_LENGTH=0;
		
		int RECYCABLE_INT_1=0;
		int RECYCABLE_INT_2=0;
		int RECYCABLE_INT_3=0;
		int RECYCABLE_INT_4=0;
		int RECYCABLE_INT_5=0;
		int RECYCABLE_INT_6=0;
		int RECYCABLE_INT_7=0;
		int RECYCABLE_INT_8=0;
		int RECYCABLE_INT_9=0;
		int RECYCABLE_INT_10=0;
		int RECYCABLE_INT_11=0;
		int RECYCABLE_INT_12=0;
		int RECYCABLE_INT_13=0;
		int RECYCABLE_INT_14=0;
		int RECYCABLE_INT_15=0;
		int RECYCABLE_INT_16=0;
		int RECYCABLE_INT_17=0;
		int RECYCABLE_INT_18=0;
		int RECYCABLE_INT_19=0;
		int RECYCABLE_INT_20=0;
		int RECYCABLE_INT_21=0;
		int RECYCABLE_INT_22=0;
		int RECYCABLE_INT_23=0;
		int RECYCABLE_INT_24=0;
		int RECYCABLE_INT_25=0;
		int RECYCABLE_INT_26=0;
		int RECYCABLE_INT_27=0;
		int RECYCABLE_INT_28=0;
		int RECYCABLE_INT_29=0;
		int RECYCABLE_INT_30=0;
		int RECYCABLE_INT_31=0;
		int RECYCABLE_INT_32=0;
		int RECYCABLE_INT_33=0;
		int RECYCABLE_INT_34=0;
		int RECYCABLE_INT_35=0;
		int RECYCABLE_INT_36=0;
		int RECYCABLE_INT_37=0;
		int RECYCABLE_INT_38=0;
		int RECYCABLE_INT_39=0;
		int RECYCABLE_INT_40=0;
		int RECYCABLE_INT_41=0;
		int RECYCABLE_INT_42=0;
		int RECYCABLE_INT_43=0;
		int RECYCABLE_INT_44=0;
		int RECYCABLE_INT_45=0;
		int RECYCABLE_INT_46=0;
		int RECYCABLE_INT_47=0;
		int RECYCABLE_INT_48=0;
		int RECYCABLE_INT_49=0;
		int RECYCABLE_INT_50=0;
		
		int L1=0;
		int L2=0;
                
		int CONTRASTING_WORD_LENGTH=0;
		int CAPITALIZED_WORD_LENGTH=0;
		
		int MATH_NUMBER_1=0;
		int MATH_NUMBER_2=0;
		int MATH_NUMBER_3=0;
		int MATH_NUMBER_4=0;
		int MATH_NUMBER_5=0;
		int MATH_NUMBER_6=0;
		int MATH_NUMBER_7=0;
		int MATH_NUMBER_8=0;
		int MATH_NUMBER_9=0;
		int MATH_NUMBER_10=0;
		int TOTAL_MATH_PROBLEMS=0;
		int ALPHABET_COUNT=0;
		
		int RECYCABLE_STRING_1_LENGTH=0;
		int RECYCABLE_STRING_2_LENGTH=0;
		int RECYCABLE_STRING_3_LENGTH=0;
		int RECYCABLE_STRING_4_LENGTH=0;
		int RECYCABLE_STRING_5_LENGTH=0;
		int RECYCABLE_STRING_6_LENGTH=0;
		int RECYCABLE_STRING_7_LENGTH=0;
		int RECYCABLE_STRING_8_LENGTH=0;
		int RECYCABLE_STRING_9_LENGTH=0;
		int RECYCABLE_STRING_10_LENGTH=0;
		
		int ENTER_COUNT=0;
		int MATH_OPERATOR_COUNT=0;
		int NUMBER_COUNT=0;
		int COMMA_COUNT=0;
		int QUESTION_MARK_COUNT=0;
		int INTELLIGENT_DATA_LENGTH=0;
		int XX_WORD_1_LENGTH=0;
		int INTELLIGENT_VERIFICATION_WRONG_CHARACTER_COUNT=0;
		int UNRECOGNIZED_CHARACTERS_LENGTH=0;
		
		int INCREASE=0;
		int ACTIVATE_CODE_1=0;
		int ACTIVATE_CODE_2=0;
		int ACTIVATE_CODE_3=0;
		int ACTIVATE_CODE_4=0;
		int ACTIVATE_CODE_5=0;
		int ACTIVATE_CODE_6=0;
		int ACTIVATE_CODE_7=0;
		int ACTIVATE_CODE_8=0;
		int ACTIVATE_CODE_9=0;
		int ACTIVATE_CODE_10=0;
		int ACTIVATE_CODE_11=0;
		int ACTIVATE_CODE_12=0;
		int ACTIVATE_CODE_13=0;
		int ACTIVATE_CODE_14=0;
		int ACTIVATE_CODE_15=0;
		int ACTIVATE_CODE_16=0;
		int ACTIVATE_CODE_17=0;
		int ACTIVATE_CODE_18=0;
		int ACTIVATE_CODE_19=0;
		int ACTIVATE_CODE_20=0;
		int ACTIVATE_CODE_21=0;
		int ACTIVATE_CODE_22=0;
		int ACTIVATE_CODE_23=0;
		int ACTIVATE_CODE_24=0;
		int ACTIVATE_CODE_25=0;
		int ACTIVATE_CODE_26=0;
		int ACTIVATE_CODE_27=0;
		int ACTIVATE_CODE_28=0;
		int ACTIVATE_CODE_29=0;
		int ACTIVATE_CODE_30=0;
		int ACTIVATE_CODE_31=0;
		int ACTIVATE_CODE_32=0;
		int ACTIVATE_CODE_33=0;
		int ACTIVATE_CODE_34=0;
		int ACTIVATE_CODE_35=0;
		int ACTIVATE_CODE_36=0;
		int ACTIVATE_CODE_37=0;
		int ACTIVATE_CODE_38=0;
		int ACTIVATE_CODE_39=0;
		int ACTIVATE_CODE_40=0;
		int ACTIVATE_CODE_41=0;
		int ACTIVATE_CODE_42=0;
		int ACTIVATE_CODE_43=0;
		int ACTIVATE_CODE_44=0;
		int ACTIVATE_CODE_45=0;
		int ACTIVATE_CODE_46=0;
		int ACTIVATE_CODE_47=0;
		int ACTIVATE_CODE_48=0;
		int ACTIVATE_CODE_49=0;
		int ACTIVATE_CODE_50=0;
		
		int AI_MEMORY_DATA_TO_WRITE_LENGTH=0;
		int AI_MEMORY_DATA_LENGTH=0;
		int AI_MEMORY_ORDER_NUMBER=0;
		int KEY=0;
		int WORD_LENGTH=0;
		int XXWORD_LENGTH=0;
		int WORD_COUNT=0;
		int XWORD_LENGTH=0;
		int TOTAL_AI_LIBRARIES=0;
		int TOTAL_CONFIRMED_AI_LIBRARY_SUBCATEGORIES=0;
		int TOTAL_CONFIRMED_AI_LIBRARY_MAIN_FOLDER_FILES=0;
		int FILE_COUNT=0;
		int FOLDER_COUNT=0;
		int PRE_TOTAL_AI_LIBRARIES=0;
		int TOTAL_AI_LIBRARIES_FOR_LOOP=0;
		int TOTAL_AI_LIBRARIES_DEFAULT=0;
		
		int FILE_1_LENGTH=0;
		int FILE_2_LENGTH=0;
		int FILE_3_LENGTH=0;
		int FILE_4_LENGTH=0;
		int FILE_5_LENGTH=0;
		
		int TOTAL_FILES_IN_LIBRARY=0;
		int LIBRARY_SUBCATEGORY_FOLDER_COUNT=0;
		int LIBRARY_COUNT_THAT_PASSED_VERIFICATION=0;
		int LIBRARY_COUNT_THAT_FAILED_VERIFICATION=0;
		int LIBRARY_SUBCATEGORY_COUNT_THAT_PASSED_VERIFICATION=0;
		int LIBRARY_SUBCATEGORY_COUNT_THAT_FAILED_VERIFICATION=0;
		
		int TOTAL_LEARNED_EXAMPLES_IN_MEMORY=0;
		
		Double RECYCABLE_DOUBLE_1=0.0;
		Double RECYCABLE_DOUBLE_2=0.0;
		Double RECYCABLE_DOUBLE_3=0.0;
		Double RECYCABLE_DOUBLE_4=0.0;
		Double RECYCABLE_DOUBLE_5=0.0;
		Double RECYCABLE_DOUBLE_6=0.0;
		Double RECYCABLE_DOUBLE_7=0.0;
		Double RECYCABLE_DOUBLE_8=0.0;
		Double RECYCABLE_DOUBLE_9=0.0;
		Double RECYCABLE_DOUBLE_10=0.0;
		Double RECYCABLE_DOUBLE_11=0.0;
		Double RECYCABLE_DOUBLE_12=0.0;
		Double RECYCABLE_DOUBLE_13=0.0;
		Double RECYCABLE_DOUBLE_14=0.0;
		Double RECYCABLE_DOUBLE_15=0.0;
		Double RECYCABLE_DOUBLE_16=0.0;
		Double RECYCABLE_DOUBLE_17=0.0;
		Double RECYCABLE_DOUBLE_18=0.0;
		Double RECYCABLE_DOUBLE_19=0.0;
		Double RECYCABLE_DOUBLE_20=0.0;
		Double RECYCABLE_DOUBLE_21=0.0;
		Double RECYCABLE_DOUBLE_22=0.0;
		Double RECYCABLE_DOUBLE_23=0.0;
		Double RECYCABLE_DOUBLE_24=0.0;
		Double RECYCABLE_DOUBLE_25=0.0;
		Double RECYCABLE_DOUBLE_26=0.0;
		Double RECYCABLE_DOUBLE_27=0.0;
		Double RECYCABLE_DOUBLE_28=0.0;
		Double RECYCABLE_DOUBLE_29=0.0;
		Double RECYCABLE_DOUBLE_30=0.0;
		Double RECYCABLE_DOUBLE_31=0.0;
		Double RECYCABLE_DOUBLE_32=0.0;
		Double RECYCABLE_DOUBLE_33=0.0;
		Double RECYCABLE_DOUBLE_34=0.0;
		Double RECYCABLE_DOUBLE_35=0.0;
		Double RECYCABLE_DOUBLE_36=0.0;
		Double RECYCABLE_DOUBLE_37=0.0;
		Double RECYCABLE_DOUBLE_38=0.0;
		Double RECYCABLE_DOUBLE_39=0.0;
		Double RECYCABLE_DOUBLE_40=0.0;
		Double RECYCABLE_DOUBLE_41=0.0;
		Double RECYCABLE_DOUBLE_42=0.0;
		Double RECYCABLE_DOUBLE_43=0.0;
		Double RECYCABLE_DOUBLE_44=0.0;
		Double RECYCABLE_DOUBLE_45=0.0;
		Double RECYCABLE_DOUBLE_46=0.0;
		Double RECYCABLE_DOUBLE_47=0.0;
		Double RECYCABLE_DOUBLE_48=0.0;
		Double RECYCABLE_DOUBLE_49=0.0;
		Double RECYCABLE_DOUBLE_50=0.0;
		
		char QM=(34);
		char ENTER_CHR=(10);
		
		//+++THESE ARE BASIC EMOTION VARIABLES THAT DETECT A VARIETY OF EMOTIONS
		//+++AS WELL AS THE SENTENCE TYPE.
		String DETECTED_EMOTION="";
		String DETECTED_INTENTION="";
		String IS_EMPATHY_DETECTED="";
		String IS_LOVE_DETECTED="";
		String IS_HATE_DETECTED="";
		String WHAT_USER_WANTS="";
		String SENTENCE_TYPE="";
		String MORE_DATA_IS_NEEDED="";

		String C_STRING_1="";
		String C_STRING_2="";
		String C_STRING_3="";
		String C_STRING_4="";
		String C_STRING_5="";
		String C_STRING_6="";
		String C_STRING_7="";
		String C_STRING_8="";
		String C_STRING_9="";
		String C_STRING_10="";

		String IS_SENTENCE_A_QUESTION="";
		String IS_SENTENCE_A_STATEMENT="";

		String DETERMINE_DATA_TYPE_STRING_1="";
		String DETERMINE_DATA_TYPE_STRING_2="";
		String DETERMINE_DATA_TYPE_STRING_3="";
		String DETERMINE_DATA_TYPE_STRING_4="";
		String DETERMINE_DATA_TYPE_STRING_5="";
		String DETERMINE_DATA_TYPE_STRING_6="";
		String DETERMINE_DATA_TYPE_STRING_7="";
		String DETERMINE_DATA_TYPE_STRING_8="";
		String DETERMINE_DATA_TYPE_STRING_9="";
		String DETERMINE_DATA_TYPE_STRING_10="";

		String APPLICABLE_TERM_1="";
		String APPLICABLE_TERM_2="";
		String APPLICABLE_TERM_3="";
		String APPLICABLE_TERM_4="";
		String APPLICABLE_TERM_5="";
		String APPLICABLE_TERM_6="";
		String APPLICABLE_TERM_7="";
		String APPLICABLE_TERM_8="";
		String APPLICABLE_TERM_9="";
		String APPLICABLE_TERM_10="";
		String APPLICABLE_TERM_11="";
		String APPLICABLE_TERM_12="";
		String APPLICABLE_TERM_13="";
		String APPLICABLE_TERM_14="";
		String APPLICABLE_TERM_15="";
		String APPLICABLE_TERM_16="";
		String APPLICABLE_TERM_17="";
		String APPLICABLE_TERM_18="";
		String APPLICABLE_TERM_19="";
		String APPLICABLE_TERM_20="";

		String APPLICABLE_COMBINATION_TERM_1="";
		String APPLICABLE_COMBINATION_TERM_2="";
		String APPLICABLE_COMBINATION_TERM_3="";
		String APPLICABLE_COMBINATION_TERM_4="";
		String APPLICABLE_COMBINATION_TERM_5="";
		String APPLICABLE_COMBINATION_TERM_6="";
		String APPLICABLE_COMBINATION_TERM_7="";
		String APPLICABLE_COMBINATION_TERM_8="";
		String APPLICABLE_COMBINATION_TERM_9="";
		String APPLICABLE_COMBINATION_TERM_10="";
		String APPLICABLE_COMBINATION_TERM_11="";
		String APPLICABLE_COMBINATION_TERM_12="";
		String APPLICABLE_COMBINATION_TERM_13="";
		String APPLICABLE_COMBINATION_TERM_14="";
		String APPLICABLE_COMBINATION_TERM_15="";
		String APPLICABLE_COMBINATION_TERM_16="";
		String APPLICABLE_COMBINATION_TERM_17="";
		String APPLICABLE_COMBINATION_TERM_18="";
		String APPLICABLE_COMBINATION_TERM_19="";
		String APPLICABLE_COMBINATION_TERM_20="";

		int APPLICABLE_TERM_1_LOCATION=0;
		int APPLICABLE_TERM_2_LOCATION=0;
		int APPLICABLE_TERM_3_LOCATION=0;
		int APPLICABLE_TERM_4_LOCATION=0;
		int APPLICABLE_TERM_5_LOCATION=0;
		int APPLICABLE_TERM_6_LOCATION=0;
		int APPLICABLE_TERM_7_LOCATION=0;
		int APPLICABLE_TERM_8_LOCATION=0;
		int APPLICABLE_TERM_9_LOCATION=0;
		int APPLICABLE_TERM_10_LOCATION=0;
		int APPLICABLE_TERM_11_LOCATION=0;
		int APPLICABLE_TERM_12_LOCATION=0;
		int APPLICABLE_TERM_13_LOCATION=0;
		int APPLICABLE_TERM_14_LOCATION=0;
		int APPLICABLE_TERM_15_LOCATION=0;
		int APPLICABLE_TERM_16_LOCATION=0;
		int APPLICABLE_TERM_17_LOCATION=0;
		int APPLICABLE_TERM_18_LOCATION=0;
		int APPLICABLE_TERM_19_LOCATION=0;
		int APPLICABLE_TERM_20_LOCATION=0;

		int APPLICABLE_COMBINATION_TERM_1_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_2_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_3_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_4_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_5_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_6_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_7_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_8_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_9_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_10_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_11_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_12_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_13_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_14_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_15_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_16_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_17_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_18_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_19_LOCATION=0;
		int APPLICABLE_COMBINATION_TERM_20_LOCATION=0;

		String APPROPIATE_SENTENCE_TEMPLATE="";
		String DOES_DATA_MATCH_ANY_SENTENCE_TEMPLATE="";


		String PRE_INTENTION="";
		String PRE_INTENTION_STRING_1="";
		String PRE_INTENTION_STRING_2="";
		String PRE_INTENTION_STRING_3="";
		String PRE_INTENTION_STRING_4="";
		String PRE_INTENTION_STRING_5="";

		String IS_MORE_INFORMATION_NEEDED="";
		String SHOULD_I_LOOK_INSIDE_THE_DATA_BANKS_FOR_THE_INFORMATION="";

		String PRE_RESPONSE_1_STRING="";
		String PRE_RESPONSE_2_STRING="";
		String PRE_RESPONSE_3_STRING="";
		String PRE_RESPONSE_4_STRING="";
		String PRE_RESPONSE_5_STRING="";
		String PRE_RESPONSE_6_STRING="";
		String PRE_RESPONSE_7_STRING="";
		String PRE_RESPONSE_8_STRING="";
		String PRE_RESPONSE_9_STRING="";
		String PRE_RESPONSE_10_STRING="";
		
		String COMPLETED_RESPONSE="";


		String AI_LIBRARY_1_NAME="Emotions";
		String AI_LIBRARY_CONSCIOUSNESS_1_NAME="Empathy";






		

		String TIME_TENSE="";
		String SENTENCE_CONTEXT="";
		String SECOND_WORD="";
		String FIRST_WORD="";
		String RESPONSE_TYPE_NEEDED="";
		String RESPONSE="";
		String SWITCH="ON";
		String SENTENCE_SUBJECT="";

		int ACTIVATION_KEY_1=0;
		int ACTIVATION_KEY_2=0;
		int DATA_CAPITALIZED_LENGTH=0;
		

		String THIRD_WORD="";
		
		
		//+++INNOVATIVE STRINGS+++//
		
		String DID_THE_USER_POTENTIALLY_INDICATE_THAT_THEY_NEED_TO_SPEAK_TO_A_COUNSELOR="";
		String DID_THE_USER_POTENTIALLY_INDICATE_THAT_THEY_NEED_TO_SPEAK_TO_A_SOFTWARE_DEVELOPER="";
		String SHOULD_I_TRANSFER_THE_USER_TO_A_COUNSELOR="";
		String SHOULD_I_TRANSFER_THE_USER_TO_A_SOFTWARE_DEVELOPER="";
		
		
		
		String WORD_DATABASE_FILE_DIRECTORY="";
		String WORD_DATABASE_DATA="";
		String IS_WORD_STORED_IN_DATABASE="";
		String EXTRA_WORD_PROCESSING_FOLDER_DIRECTORY="";
		
		//++++++++++++++++++++++//
		//+++END OF VARIABLES+++//
		//++++++++++++++++++++++//
		
		
		//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			
		
		
		//+++++++++++++++//
		//+++AI MENU A+++//
		//+++++++++++++++//



		//---------------------------------------------------//
		System.out.println("********************************");
		System.out.println("*AI INNOVATIONS EXPERIMENT v"+VERSION+"*");
		System.out.println("********************************");
		System.out.println("");
		//---------------------------------------------------//
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		//------------------------------------------------------------------------------------------------------------------------------------------------------------//
		
		
		//++++++++++++++++++++//
		//+++LEARN EXAMPLES+++//
		//++++++++++++++++++++//
		
		RECYCABLE_STRING_1="/sdcard/ARTIFICIAL INTELLIGENCE/EXAMPLES/";
		File RECYCABLE_STRING_1_FILE=new File(RECYCABLE_STRING_1);
		
		if (RECYCABLE_STRING_1_FILE.exists()) {
			
			
			String[] foldersInExamplesDir=RECYCABLE_STRING_1_FILE.list();
			
			//+++SET TOTAL FILES+++//
			RECYCABLE_INT_1=foldersInExamplesDir.length;
			
			
			if (RECYCABLE_INT_1>0) {
				
				System.out.println("LEARNING EXAMPLES...");
				System.out.println("--------------------");
				
	for (I=0;I<=RECYCABLE_INT_1;I++) {
				
					
					
					//+++SET EXAMPLE FOLDER NAME+++//
					try {		
					RECYCABLE_STRING_2=foldersInExamplesDir[I];
					} catch(ArrayIndexOutOfBoundsException a) {}
					
					
					//+++EXAMPLE FILE DIRECTORY+++//
					RECYCABLE_STRING_3=RECYCABLE_STRING_1+RECYCABLE_STRING_2+"/";
					File RECYCABLE_STRING_3_FILE=new File(RECYCABLE_STRING_3);
					Path RECYCABLE_STRING_3_PATH=Paths.get(RECYCABLE_STRING_3);
					
					
					//+++LEARNED FOLDER FILE DIRECTORY+++//
					RECYCABLE_STRING_4="/sdcard/ARTIFICIAL INTELLIGENCE/MEMORY/LEARNED/"+RECYCABLE_STRING_2;
					File RECYCABLE_STRING_4_FILE=new File(RECYCABLE_STRING_4);
					Path RECYCABLE_STRING_4_PATH=Paths.get(RECYCABLE_STRING_4);

					
					
					//+++ONLY PROCESS FILES FOR NOW TO TEACH AI+++//
					if (RECYCABLE_STRING_3_FILE.isDirectory()) {
					
				
					//+++COPY EXAMPLE FOLDER ALONE+++//
					try {
						//Files.copy(RECYCABLE_STRING_3_FILE.toPath(), RECYCABLE_STRING_4_FILE.toPath());
						
						Files.copy (RECYCABLE_STRING_3_PATH,RECYCABLE_STRING_4_PATH);	
					}

					catch (IOException e) {}	
					
					
					//+++COPY FILES INSIDE EXAMPLE FOLDER+++//
					String[] filesInExampleFolderDir=RECYCABLE_STRING_3_FILE.list();
					RECYCABLE_INT_2=filesInExampleFolderDir.length;
					
					
		for (A=0;A<=RECYCABLE_INT_2;A++) {
						
			try {
			RECYCABLE_STRING_5=filesInExampleFolderDir[A];
			} catch (ArrayIndexOutOfBoundsException a) {}
						
			RECYCABLE_STRING_6="/sdcard/ARTIFICIAL INTELLIGENCE/EXAMPLES/"+RECYCABLE_STRING_2+"/"+RECYCABLE_STRING_5;
			File RECYCABLE_STRING_6_FILE=new File(RECYCABLE_STRING_6);
			
			RECYCABLE_STRING_7="/sdcard/ARTIFICIAL INTELLIGENCE/MEMORY/LEARNED/"+RECYCABLE_STRING_2+"/"+RECYCABLE_STRING_5;
			File RECYCABLE_STRING_7_FILE=new File(RECYCABLE_STRING_7);
			
			
			
			//+++COPY EXAMPLE FOLDER ALONE+++//
			try {
				Files.copy(RECYCABLE_STRING_6_FILE.toPath(), RECYCABLE_STRING_7_FILE.toPath());

				//Files.copy (RECYCABLE_STRING_3_PA,RECYCABLE_STRING_4_PATH);	
			}

			catch (IOException e) {}	
						
			
			
			//+++GET RECORD OF COPIED FILES+++//
			if (RECYCABLE_STRING_7_FILE.exists()) {
				RECYCABLE_INT_3++;
			}
			//+++END OF LOOP+++//

			
		}
		//+++END OF LOOP+++//
					
					
					RECYCABLE_INT_3=RECYCABLE_INT_3-1;
					
					
					//+++VERIFY THAT EXAMPLE WAS LEARNED SUCCESSFULLY+++//
					if (RECYCABLE_INT_3==RECYCABLE_INT_2) {
						System.out.println("Learned "+RECYCABLE_STRING_2+" successfully.");
						System.out.println(CONSOLE_SPACER_2);
					} else {
						System.out.println("recycable int 3="+RECYCABLE_INT_3);
						System.out.println("recycable int 2="+RECYCABLE_INT_2);
					}
					
					
					
					
					}
					//+++END OF IS A FILE CONDITION+++//
					
					
						
				}
				//+++END OF LOOP+++//
				
			
			}
			//+++END OF CONDITION+++//
	
			
		}
		//+++END OF CONDITION+++//
		
		else {
			System.out.println("Examples folder is missing.");
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		RECYCABLE_STRING_1="";
		RECYCABLE_STRING_2="";
		RECYCABLE_STRING_3="";
		RECYCABLE_STRING_4="";
		RECYCABLE_STRING_5="";
		RECYCABLE_STRING_6="";
		RECYCABLE_STRING_7="";
		
		RECYCABLE_INT_1=0;
		RECYCABLE_INT_2=0;
		RECYCABLE_INT_3=0;
		
		//++++++++++++++++++++++++++++++//
		//+++END OF LEARNING EXAMPLES+++//
		//++++++++++++++++++++++++++++++//
		
		
		//------------------------------------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		//----------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		
		//+++++++++++++++//
		//+++AI MENU B+++//
		//+++++++++++++++//
		
		
		
		//---------------------------------------------------//
		System.out.println("ENTER DATA.");
		System.out.println("-----------");
                
        //DATA="what is the difference between soda, water, coffee, and milk?";
		Scanner input = new Scanner(System.in);
       	DATA = input.nextLine();
		
        UNALTERED_DATA=DATA;
		DATA_CAPITALIZED=DATA.toUpperCase();
		DATA=DATA_CAPITALIZED;
		DATA_LENGTH=DATA.length();
        ANDROID_DIRECTORY="/sdcard/";
        WINDOWS_DIRECTORY="C:/";
		System.out.println();
		
		
		
		
		//+++SET ACCEPTABLE CHARACTERS+++//
		for (I=1;I<=DATA_LENGTH;I++) {
			
			try {
			DETECT_1_CHAR=DATA_CAPITALIZED.substring(I,I+1);
			}
			catch (StringIndexOutOfBoundsException e) {}
			
			
			if (DETECT_1_CHAR.equals("A") || DETECT_1_CHAR.equals("B") || DETECT_1_CHAR.equals("C") || DETECT_1_CHAR.equals("D") || DETECT_1_CHAR.equals("E") || DETECT_1_CHAR.equals("F") || DETECT_1_CHAR.equals("G") || DETECT_1_CHAR.equals("H") || DETECT_1_CHAR.equals("I") || DETECT_1_CHAR.equals("J") || DETECT_1_CHAR.equals("K") || DETECT_1_CHAR.equals("L") || DETECT_1_CHAR.equals("M") || DETECT_1_CHAR.equals("N") || DETECT_1_CHAR.equals("O") || DETECT_1_CHAR.equals("P") || DETECT_1_CHAR.equals("Q") || DETECT_1_CHAR.equals("R") || DETECT_1_CHAR.equals("S") || DETECT_1_CHAR.equals("T") || DETECT_1_CHAR.equals("U") || DETECT_1_CHAR.equals("V") || DETECT_1_CHAR.equals("W") || DETECT_1_CHAR.equals("X") || DETECT_1_CHAR.equals("Y") || DETECT_1_CHAR.equals("Z") || DETECT_1_CHAR.equals(" ") || DETECT_1_CHAR.equals(".") || DETECT_1_CHAR.equals("?") || DETECT_1_CHAR.equals("!") || DETECT_1_CHAR.equals(",")) {
				A=A+1;
			}
			
			else {
				WRONG_CHARACTERS_COMBINED=DETECT_1_CHAR+WRONG_CHARACTERS_COMBINED;
				INTELLIGENT_VERIFICATION_WRONG_CHARACTER_COUNT++;
			}
			
			
		}
		//+++END OF LOOP+++//
		
		
		if (A==DATA_LENGTH) {
			DID_CHARACTERS_PASS_VERIFICATION="YES";
		}
		
		if (A!=DATA_LENGTH) {
			DID_CHARACTERS_PASS_VERIFICATION="NO";
			System.out.println("YOU ENTERED "+INTELLIGENT_VERIFICATION_WRONG_CHARACTER_COUNT+" UNACCEPTABLE CHARACTERS: "+WRONG_CHARACTERS_COMBINED);
		}
		
		//+++END OF FILTERING OUT UNACCEPTABLE CHARACTERS+++//
		
		
		
		
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		//+++BEGIN PROGRAM ONCE CHARACTERS PASSED VERIFICATION+++//
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		if (DID_CHARACTERS_PASS_VERIFICATION.equals("YES")) {
		
		
		//+++GET WORD COUNT+++//
		for (A=1;A<=DATA_LENGTH;A++) {
			
			try {
				DETECT_1_CHAR=DATA_CAPITALIZED.substring(A,A+1);
			}
			
			catch (StringIndexOutOfBoundsException e) {}
			
			
			
			if (DETECT_1_CHAR.equals(".") || DETECT_1_CHAR.equals(" ") || DETECT_1_CHAR.equals(",") || DETECT_1_CHAR.equals("?")) {
				TOTAL_WORD_COUNT=TOTAL_WORD_COUNT+1;
			}
			//+++END OF CONDITION+++//
			
			
			
		}
		//+++END OF LOOP+++//
		
		//--------------------//
		
		
		
		
		
		
		//+++CORRECT WORD COUNT+++//
		TOTAL_WORD_COUNT=TOTAL_WORD_COUNT-1;
		
		
		
                //+++DETERMINE OPERATING SYSTEM+++//
                File ANDROID_FILE_SYSTEM=new File(ANDROID_DIRECTORY);
                File WINDOWS_FILE_SYSTEM=new File(WINDOWS_DIRECTORY);
                
                
                //+++DETECT ANDROID OS+++//
                if (ANDROID_FILE_SYSTEM.exists()) {
					
					if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
                    System.out.println("Device Type: Android");
					}
					
					OPERATING_SYSTEM_DETECTED="ANDROID";
					AI_FOLDER_DIRECTORY=ANDROID_DIRECTORY+"ARTIFICIAL INTELLIGENCE/";
                }
                //+++END OF CONDITION+++//
              
				
				
				//+++DETECT WINDOWS OS+++//
				if (WINDOWS_FILE_SYSTEM.exists()) {
					
					if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
					System.out.println("Device Type: Windows");
					}
					
					OPERATING_SYSTEM_DETECTED="WINDOWS";
					AI_FOLDER_DIRECTORY=WINDOWS_DIRECTORY+"ARTIFICIAL INTELLIGENCE/";
				}
				//+++END OF CONDITION+++//
				
					
		
		
		
		System.out.println("");
		System.out.println("");
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		
		
		
		
		
		
		//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		//+++CHECK AI RESOURCES FOR STABILITY AND RELIABILITY+++//
		//++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		
		
		//++++++++++++++++++++++++++++++++++++//
		//+++RESOURCE DIRECTORIES AND FILES+++//
		//++++++++++++++++++++++++++++++++++++//

		AI_LIBRARY_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"LIBRARIES/";
		AI_EXAMPLES_DIRECTORY=AI_FOLDER_DIRECTORY+"EXAMPLES/";
		AI_UPDATE_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"UPDATED AI/";
		AI_MEMORY_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"MEMORY/";
		AI_LEARNED_MEMORY_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"LEARNED/";
		AI_FILE_DIRECTORY="/sdcard/AppProjects/EXP/SRC/Main.java";
		AI_MEMORY_COUNT_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"MEMORY_SLOT_COUNT.AI";
		AI_MEMORY_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"MEMORY.AI";
		DATA_PROCESSING_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"WORD_PROCESSING/";
		WORD_PROCESSING_FOLDER_1=DATA_PROCESSING_FOLDER_DIRECTORY+"WORDS/";
		WORD_PROCESSING_FOLDER_2=DATA_PROCESSING_FOLDER_DIRECTORY+"WORD_TYPES/";
		WORD_PROCESSING_FOLDER_3=DATA_PROCESSING_FOLDER_DIRECTORY+"WORD_LENGTHS/";
		WORD_PROCESSING_FOLDER_4=DATA_PROCESSING_FOLDER_DIRECTORY+"CLASSIFICATION/";
		AI_BACKUP_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"BACKUPS/";
		AI_BACKUP_COUNT_FILE_DIRECTORY=AI_BACKUP_FOLDER_DIRECTORY+"BACKUP_COUNT.AI";
		INTERACTIVE_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"INTERACTIVE/";
		WORD_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/Word_DataBase.txt";
		EXTRA_WORD_PROCESSING_FOLDER_DIRECTORY=WORD_PROCESSING_FOLDER_1+"EXTRA/";
		
		File MEMORY_COUNT_FILE=new File(AI_MEMORY_COUNT_FILE_DIRECTORY);
		File MEMORY_FILE=new File(AI_MEMORY_FILE_DIRECTORY);
		File AI_RESOURCE_DIRECTORY=new File(AI_FOLDER_DIRECTORY);
		File AI_LIBRARIES_FOLDER=new File(AI_LIBRARY_FOLDER_DIRECTORY);
		File AI_UPDATE_FOLDER=new File(AI_UPDATE_FOLDER_DIRECTORY);
		File AI_MEMORY_FOLDER=new File(AI_MEMORY_FOLDER_DIRECTORY);
		File DATA_PROCESSING_FOLDER_DIRECTORY_FILE=new File(DATA_PROCESSING_FOLDER_DIRECTORY);
		File WORD_PROCESSING_FOLDER_1_FILE=new File(WORD_PROCESSING_FOLDER_1);
		File WORD_PROCESSING_FOLDER_2_FILE=new File(WORD_PROCESSING_FOLDER_2);
		File WORD_PROCESSING_FOLDER_3_FILE=new File(WORD_PROCESSING_FOLDER_3);
		File WORD_PROCESSING_FOLDER_4_FILE=new File(WORD_PROCESSING_FOLDER_4);
		File AI_BACKUP_FOLDER_DIRECTORY_FILE=new File(AI_BACKUP_FOLDER_DIRECTORY);
		File AI_BACKUP_COUNT_FILE_DIRECTORY_FILE=new File(AI_BACKUP_COUNT_FILE_DIRECTORY);
		File AI_EXAMPLES_DIRECTORY_FILE=new File(AI_EXAMPLES_DIRECTORY);
		File AI_LEARNED_MEMORY_DIRECTORY_FILE=new File(AI_LEARNED_MEMORY_DIRECTORY);
		File INTERACTIVE_FOLDER_DIRECTORY_FILE=new File(INTERACTIVE_FOLDER_DIRECTORY);
		File WORD_DATABASE_FILE=new File(WORD_DATABASE_FILE_DIRECTORY);
		File EXTRA_WORD_PROCESSING_FOLDER_FILE=new File(EXTRA_WORD_PROCESSING_FOLDER_DIRECTORY);
		
		//+++++++++++++++++++++++++++++++++++++++++++//
		//+++END OF RESOURCE DIRECTORIES AND FILES+++//
		//+++++++++++++++++++++++++++++++++++++++++++//
		
		
		//----------------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		
		
		
		
		
		
		
		
		//+++++++++++++++++++++++++++//
		//+++DELETE OLD TEMP FILES+++//
		//+++++++++++++++++++++++++++//

		File Temp_Words_Directory=new File(DATA_PROCESSING_FOLDER_DIRECTORY+"WORDS/");
		File Temp_Word_Lengths_Directory=new File(DATA_PROCESSING_FOLDER_DIRECTORY+"WORD_LENGTHS/");
		File Temp_Word_Classification_Directory=new File(WORD_PROCESSING_FOLDER_4);
		File Temp_Extra_Words_Directory=new File(EXTRA_WORD_PROCESSING_FOLDER_DIRECTORY);
		
		String[] filesInWordsTempDir=Temp_Words_Directory.list();
		String[] filesInWordLengthTempDir=Temp_Word_Lengths_Directory.list();
		String[] filesInWordClassificationTempDir=Temp_Word_Classification_Directory.list();
		String[] filesInExtraWordsTempDir=Temp_Extra_Words_Directory.list();
		
		
		//+++DELETE WORDS+++//
		for (I=0;I<=filesInWordsTempDir.length;I++) {
		
			try {
				File FILES_TO_DELETE=new File(DATA_PROCESSING_FOLDER_DIRECTORY+"WORDS/"+filesInWordsTempDir[I]);
			
			if (FILES_TO_DELETE.delete()) {} else {
				
				if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
				System.out.println("Temp files failed to delete.");
				}
				
				}
				
			}
			
			catch (ArrayIndexOutOfBoundsException e) {}
		
		}
		//+++END OF LOOP+++//

		
		//--------------------------------------------------------------------------------------------------------------------------------//
		
		
		//+++DELETE WORD LENGTHS+++//
		for (I=0;I<=filesInWordLengthTempDir.length;I++) {

			try {
				File FILES_TO_DELETE=new File(DATA_PROCESSING_FOLDER_DIRECTORY+"WORD_LENGTHS/"+filesInWordLengthTempDir[I]);

				if (FILES_TO_DELETE.delete()) {} else {System.out.println("Temp files failed to delete.");}

			}

			catch (ArrayIndexOutOfBoundsException e) {}

		}
		//+++END OF LOOP+++//
		
		//--------------------------------------------------------------------------------------------------------------------------------//
		
		
		//+++DELETE WORD CLASSIFICATION FILES+++//
		for (I=0;I<=filesInWordClassificationTempDir.length;I++) {

			try {
				File FILES_TO_DELETE=new File(WORD_PROCESSING_FOLDER_4+filesInWordClassificationTempDir[I]);

				if (FILES_TO_DELETE.delete()) {} else {System.out.println("Temp files failed to delete.");}

			}

			catch (ArrayIndexOutOfBoundsException e) {}

		}
		//+++END OF LOOP+++//
		
		
		//--------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		//+++DELETE EXTRA WORD FILES+++//
			for (I=0;I<=filesInExtraWordsTempDir.length;I++) {

				try {
					File FILES_TO_DELETE=new File(EXTRA_WORD_PROCESSING_FOLDER_DIRECTORY+filesInExtraWordsTempDir[I]);

					if (FILES_TO_DELETE.delete()) {} else {System.out.println("Temp files failed to delete.");}

				}

				catch (ArrayIndexOutOfBoundsException e) {}

			}
		//+++END OF LOOP+++//
		
		
		
		//--------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		//++++++++++++++++++++++++++++++++//
		//+++END OF DELETING TEMP FILES+++//
		//++++++++++++++++++++++++++++++++//
		
		
		//----------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


		//----------------------------------------------------------------------------------------------------------------------------------//
		
		
		if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
			
		System.out.println("CHECKING RESOURCES...");
		System.out.println("---------------------");
		
		}
		//+++END OF CONDITION+++//
		
		
		//+++CREATE AI MAIN DIRECTORY FOR RESOURCES ON ANDROID+++//
		if (AI_RESOURCE_DIRECTORY.exists()) {} else {
			AI_RESOURCE_DIRECTORY.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		if (AI_LIBRARIES_FOLDER.exists()) {} else {
			AI_LIBRARIES_FOLDER.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		if (AI_UPDATE_FOLDER.exists()) {} else {
			AI_UPDATE_FOLDER.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		if (AI_MEMORY_FOLDER.exists()) {} else {
			AI_MEMORY_FOLDER.mkdir();	
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		if (DATA_PROCESSING_FOLDER_DIRECTORY_FILE.exists()) {} else {
			DATA_PROCESSING_FOLDER_DIRECTORY_FILE.mkdir();
			
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		if (WORD_PROCESSING_FOLDER_1_FILE.exists()) {} else {
			WORD_PROCESSING_FOLDER_1_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (WORD_PROCESSING_FOLDER_2_FILE.exists()) {} else {
			WORD_PROCESSING_FOLDER_2_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (WORD_PROCESSING_FOLDER_3_FILE.exists()) {} else {
			WORD_PROCESSING_FOLDER_3_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (WORD_PROCESSING_FOLDER_4_FILE.exists()) {} else {
			WORD_PROCESSING_FOLDER_4_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (EXTRA_WORD_PROCESSING_FOLDER_FILE.exists()) {} else {
			EXTRA_WORD_PROCESSING_FOLDER_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (AI_BACKUP_FOLDER_DIRECTORY_FILE.exists()) {} else {
			AI_BACKUP_FOLDER_DIRECTORY_FILE.mkdir();
		}
		//+++END OF ELSE CONDIITON+++//
		
		
		if (AI_LEARNED_MEMORY_DIRECTORY_FILE.exists()) {} else {
			AI_LEARNED_MEMORY_DIRECTORY_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (AI_EXAMPLES_DIRECTORY_FILE.exists()) {} else {
			AI_EXAMPLES_DIRECTORY_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		if (INTERACTIVE_FOLDER_DIRECTORY_FILE.exists()) {} else {
			INTERACTIVE_FOLDER_DIRECTORY_FILE.mkdir();
		}
		//+++END OF ELSE CONDITION+++//
		
		
		
		
		
		if (INTERACTIVE_FOLDER_DIRECTORY_FILE.exists() && EXTRA_WORD_PROCESSING_FOLDER_FILE.exists() && AI_BACKUP_FOLDER_DIRECTORY_FILE.exists() && AI_BACKUP_COUNT_FILE_DIRECTORY_FILE.exists() && MEMORY_FILE.exists() && MEMORY_COUNT_FILE.exists() && DATA_PROCESSING_FOLDER_DIRECTORY_FILE.exists() && WORD_PROCESSING_FOLDER_1_FILE.exists() && WORD_PROCESSING_FOLDER_2_FILE.exists() && WORD_PROCESSING_FOLDER_3_FILE.exists() && WORD_PROCESSING_FOLDER_4_FILE.exists()) {
			
			if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
			System.out.println("RESOURCES ARE GOOD TO GO.");
			System.out.println();
			System.out.println();
			}
			//+++END OF CONDITION+++//
			
		}
		
		else {
			System.out.println("MISSING RESOURCES");
			
			
			
			//+++CREATE AI MEMORY FILE+++//
			if (MEMORY_FILE.exists()) {} else {
				System.out.println("CREATING AI MEMORY...");
				
				try {
					FileWriter FILE_WRITER=new FileWriter(AI_MEMORY_FILE_DIRECTORY);
					FILE_WRITER.write("");
					FILE_WRITER.close();
				}

				catch (IOException e) {}
				
				
			}
			//+++END OF CONDITION+++//
			
			
			//+++CREATE AI MEMORY SLOT COUNT FILE+++//
			if (MEMORY_COUNT_FILE.exists()) {} else {
				System.out.println("CREATING AI MEMORY SLOT COUNT FILE...");
				
				try {
					FileWriter FILE_WRITER=new FileWriter(AI_MEMORY_COUNT_FILE_DIRECTORY);
					FILE_WRITER.write("0");
					FILE_WRITER.close();
				}

				catch (IOException e) {}
				
			}
			//+++END OF CONDITION+++//
			
			
			//+++CREATE BACKUP COUNT FILE+++// 
			if (AI_BACKUP_COUNT_FILE_DIRECTORY_FILE.exists()) {} else {
				System.out.println("CREATING AI BACKUP COUNT FILE...");

				try {
					FileWriter FILE_WRITER=new FileWriter(AI_BACKUP_COUNT_FILE_DIRECTORY);
					FILE_WRITER.write("0");
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF CONDITION+++//
			
			
			
			
			
			
			
			
			//+++VERIFY THAT RESOURCES WERE CREATED SUCCESSFULLY+++//
			if (INTERACTIVE_FOLDER_DIRECTORY_FILE.exists() && AI_EXAMPLES_DIRECTORY_FILE.exists() && EXTRA_WORD_PROCESSING_FOLDER_FILE.exists() && AI_LEARNED_MEMORY_DIRECTORY_FILE.exists() && AI_BACKUP_FOLDER_DIRECTORY_FILE.exists() && AI_BACKUP_COUNT_FILE_DIRECTORY_FILE.exists() && MEMORY_FILE.exists() && MEMORY_COUNT_FILE.exists() && DATA_PROCESSING_FOLDER_DIRECTORY_FILE.exists() && WORD_PROCESSING_FOLDER_1_FILE.exists() && WORD_PROCESSING_FOLDER_2_FILE.exists() && WORD_PROCESSING_FOLDER_3_FILE.exists() && WORD_PROCESSING_FOLDER_4_FILE.exists()) {
				System.out.println("RESOURCES CREATED SUCCESSFULLY.");
			}
			//+++END OF CONDITION+++//
			
			else {
				System.out.println("RESOURCE CREATION FAILED.");
			}
			//+++END OF ELSE CONDITION+++//
			
			
			
			if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
				
			System.out.println();
			System.out.println();
			
			}
			//+++END OF CONDITION+++//
			
		}
		//+++END OF ELSE CONDITION+++//
		
	
	
		
		//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		
		
		
		
		
		
		//+++++++++++++++++//
		//+++AUTO BACKUP+++//
		//+++++++++++++++++//
		
		
		//+++GET CURRENT BACKUP NUMBER+++//
		File getOldBackupNumber=new File(AI_BACKUP_COUNT_FILE_DIRECTORY);	
		Scanner myReader8=new Scanner (getOldBackupNumber);
		while (myReader8.hasNextLine()) {
			OLD_BACKUP_COUNT_STRING=myReader8.nextLine();
		}
		myReader8.close();
		//+++END OF FILE READING+++//
		
		
		//+++UPDATE VALUE+++//
		OLD_BACKUP_COUNT=Integer.parseInt(OLD_BACKUP_COUNT_STRING);
		UPDATED_BACKUP_COUNT=OLD_BACKUP_COUNT+1;
		UPDATED_BACKUP_COUNT_STRING=String.valueOf(UPDATED_BACKUP_COUNT);
		
		
		//+++SAVE UPDATED VALUE+++//
		try {
			FileWriter FILE_WRITER=new FileWriter(AI_BACKUP_COUNT_FILE_DIRECTORY);
			FILE_WRITER.write(UPDATED_BACKUP_COUNT_STRING);
			FILE_WRITER.close();
		}

		catch (IOException e) {}
		
		
		
		
		//+++SET BACKUP FOLDER NAME+++//
		NEW_BACKUP_FOLDER_NAME="BACKUP "+UPDATED_BACKUP_COUNT_STRING;
		
		//+++CREATE DIRECTORY+++//
		File LATEST_BACKUP_FOLDER_FILE=new File(AI_BACKUP_FOLDER_DIRECTORY+NEW_BACKUP_FOLDER_NAME+"/");
		LATEST_BACKUP_FOLDER_FILE.mkdir();
		
		//+++BACKUP JAVA FILE+++//
		SOURCE_FILE_DIRECTORY="/sdcard/AppProjects/EXP/src/Main.java";
		DESTINATION_FILE_DIRECTORY=AI_BACKUP_FOLDER_DIRECTORY+NEW_BACKUP_FOLDER_NAME+"/AI_BACKUP.JAVA";
		
		File SOURCE_CODE_FILE=new File(SOURCE_FILE_DIRECTORY);
		File BACKUP_FILE=new File(DESTINATION_FILE_DIRECTORY);
		
		
		try {
		Files.copy(SOURCE_CODE_FILE.toPath(), BACKUP_FILE.toPath());
		}
		
		catch (IOException e) {}	
		
		//++++++++++++++++++++++++//
		//+++END OF AUTO BACKUP+++//
		//++++++++++++++++++++++++//
		
		
		//--------------------------------------------------------------------------------------------------------------------//
		
		
		
		
		
		
		
		
		
		
		
		
		//------------------------------------------------------------------------------------------------------------------------------------------------//
		
		
		//+++++++++++++++++++++++++++++++++++++++++//
		//+++VERIFY LIBRARIES ARE CORRECT FORMAT+++//
		//+++++++++++++++++++++++++++++++++++++++++//
		
		if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
			
		System.out.println("VERIFYING LIBRARIES...");
		System.out.println("----------------------");
		
		}
		//+++END OF CONDITION+++//
		
		
		//+++GET LIBRARY COUNT+++//
		File AI_LIBRARY_FOLDER_FILE=new File(AI_LIBRARY_FOLDER_DIRECTORY);
		String[] AI_LIBRARY_FILES_FILE=AI_LIBRARY_FOLDER_FILE.list();
		TOTAL_AI_LIBRARIES_DEFAULT=AI_LIBRARY_FILES_FILE.length;
		TOTAL_AI_LIBRARIES_FOR_LOOP=TOTAL_AI_LIBRARIES_DEFAULT-1;
		
		//System.out.println("AI FOLDER DIRECTORY="+AI_LIBRARY_FOLDER_DIRECTORY);
		//System.out.println("TOTAL LIBRARIES="+TOTAL_AI_LIBRARIES_DEFAULT);
		
		//+++VERIFY THAT LIBRARIES FOLDER HAS ONLY FOLDERS+++//
		for (I=0;I<=TOTAL_AI_LIBRARIES_FOR_LOOP;I++) {
		
		try {
		CURRENT_FILE=AI_LIBRARY_FILES_FILE[I];	
		} catch (ArrayIndexOutOfBoundsException a) {}
		File CURRENT_FILE_FILE=new File(AI_LIBRARY_FOLDER_DIRECTORY+CURRENT_FILE);
		
		
		//+++GET FILE COUNT+++//
		if (CURRENT_FILE_FILE.isFile()) {
			FILE_COUNT=FILE_COUNT+1;
			FILE_COUNT_STRING=String.valueOf(FILE_COUNT);
		}
		//+++END OF CONDITION+++//
		
		//-----------------------------------------------------------------------------------------------//
		
		//+++GET FOLDER COUNT+++//
		if (CURRENT_FILE_FILE.isDirectory()) {
			FOLDER_COUNT=FOLDER_COUNT+1;
			FOLDER_COUNT_STRING=String.valueOf(FOLDER_COUNT);
		}
		//+++END OF CONDITION+++//
		
		}
		//+++END OF LOOP+++//
		
		
		
		//System.out.println("Total Files in Libraries Directory="+FILE_COUNT);
		//System.out.println("Total Folders in Libraries Directory="+FOLDER_COUNT);
		CURRENT_FILE="";
		
		
		
		//+++VERIFY THAT FILES AND FOLDERS ARE CORRECT FORMAT+++//
		for (I=0;I<=TOTAL_AI_LIBRARIES_FOR_LOOP;I++) {
		
			A=I+1;
			
			
			try {
			CURRENT_FILE=AI_LIBRARY_FILES_FILE[I];
			}
			catch (ArrayIndexOutOfBoundsException a) {}
		
		
		
		//+++GET TOTAL SUBCATEGORY FOLDERS+++//
		
		AI_LIBRARY_SUBCATEGORY_FOLDER_DIRECTORY=AI_LIBRARY_FOLDER_DIRECTORY+CURRENT_FILE+"/";
		File AI_LIBRARY_SUBCATEGORY_FOLDER_DIRECTORY_FILE=new File(AI_LIBRARY_SUBCATEGORY_FOLDER_DIRECTORY);
		
		String[] AI_LIBRARY_SUBCATEGORY_FOLDER_FILE=AI_LIBRARY_SUBCATEGORY_FOLDER_DIRECTORY_FILE.list();
		TOTAL_FILES_IN_LIBRARY=AI_LIBRARY_SUBCATEGORY_FOLDER_FILE.length;
		
		
		for (B=0;B<=TOTAL_FILES_IN_LIBRARY-1;B++) {
			
			try {
			CURRENT_FILE_2=AI_LIBRARY_SUBCATEGORY_FOLDER_FILE[B];
			}
			catch (ArrayIndexOutOfBoundsException a) {}
			
			try {
			RECYCABLE_STRING_1=CURRENT_FILE_2.substring(0,11);
			}
			catch (StringIndexOutOfBoundsException e) {}
			
			DIRECTORY_1=AI_LIBRARY_SUBCATEGORY_FOLDER_DIRECTORY+CURRENT_FILE_2;
			
			File DIRECTORY_1_FILE=new File(DIRECTORY_1);
			
			if (DIRECTORY_1_FILE.isDirectory() && RECYCABLE_STRING_1.equalsIgnoreCase("Subcategory")) {
				LIBRARY_SUBCATEGORY_FOLDER_COUNT++;
			}
			
			
		}
		//+++END OF LOOP+++//
		
		
		
		
		
		
		
		
		for (C=0;C<=LIBRARY_SUBCATEGORY_FOLDER_COUNT-1;C++) {
		
			D=C+1;
			
			
		//+++SET LOOP FOR THE TOTAL SUBCATEGORIES+++//
		
			
		//+++VERIFY THAT EACH LIBRARY FOLDER CONTAINS THE NEEDED FILES AND FOLDERS+++//
		FOLDER_NAME_1="Subcategory_"+D;
		FILE_NAME_1="Main_Category.txt";
		FILE_NAME_2="SubCategory_"+D+".txt";
		FILE_NAME_3="All_Terms.txt";
		FOLDER_NAME_2="TERMS";
		FOLDER_1_DIRECTORY=AI_LIBRARY_FOLDER_DIRECTORY+CURRENT_FILE+"/";
		
		FILE_1_DIRECTORY=FOLDER_1_DIRECTORY+FILE_NAME_1;
		FILE_2_DIRECTORY=FOLDER_1_DIRECTORY+FOLDER_NAME_1+"/"+FILE_NAME_2;
		FILE_3_DIRECTORY=FOLDER_1_DIRECTORY+FOLDER_NAME_1+"/"+FOLDER_NAME_2+"/"+FILE_NAME_3;
		
		
		File LIBRARY_MAIN_CATEGORY_FILE=new File(FILE_1_DIRECTORY);
		File LIBRARY_SUBCATEGORY_FILE=new File(FILE_2_DIRECTORY);
		File LIBRARY_ALL_TERMS_FILE=new File(FILE_3_DIRECTORY);
		
		//System.out.println("LIBRARY FOLDER DIRECTORY="+FOLDER_1_DIRECTORY);
		//System.out.println("MAIN CATEGORY DIRECTORY="+FILE_1_DIRECTORY);
		//System.out.println("SUBCATEGORY FILE FOLDER="+FILE_2_DIRECTORY);
		//System.out.println("TERMS FILE DIRECTORY="+FILE_3_DIRECTORY);
		
		
		if (LIBRARY_MAIN_CATEGORY_FILE.exists()) {
			
			//System.out.println("MAIN CATEGORY FILE EXISTS.");
			
			//+++READ FILE+++//
			Scanner myReader1=new Scanner (LIBRARY_MAIN_CATEGORY_FILE);
			while (myReader1.hasNextLine()) {
				FILE_1_DATA=myReader1.nextLine()+FILE_1_DATA;
			}
			myReader1.close();
			
			//+++SET FILE LENGTH+++//
			FILE_1_LENGTH=FILE_1_DATA.length();
		}
		
		
		
		if (LIBRARY_SUBCATEGORY_FILE.exists()) {
			
			//System.out.println("SUBCATEGORY FILE EXISTS.");
			
			//+++READ FILE+++//
			Scanner myReader2=new Scanner (LIBRARY_SUBCATEGORY_FILE);
			while (myReader2.hasNextLine()) {
				FILE_2_DATA=myReader2.nextLine()+FILE_2_DATA;
			}
			myReader2.close();
			//+++SET FILE LENGTH+++//
			FILE_2_LENGTH=FILE_2_DATA.length();
		} 
		
		
		
		if (LIBRARY_ALL_TERMS_FILE.exists()) {
			
			//System.out.println("ALL TERMS FILE EXISTS.");
			
			//+++READ FILE+++//
			Scanner myReader3=new Scanner (LIBRARY_ALL_TERMS_FILE);
			while (myReader3.hasNextLine()) {
				FILE_3_DATA=myReader3.nextLine()+FILE_3_DATA;
			}
			myReader3.close();
			//+++SET FILE LENGTH+++//
			FILE_3_LENGTH=FILE_3_DATA.length();
		}
		
		
		
		
		if (LIBRARY_MAIN_CATEGORY_FILE.exists() && LIBRARY_SUBCATEGORY_FILE.exists() && LIBRARY_ALL_TERMS_FILE.exists() && FILE_1_LENGTH>0 && FILE_2_LENGTH>0 && FILE_3_LENGTH>0) {
			//System.out.println(CONSOLE_SPACER_4+"LIBRARY: '"+CURRENT_FILE+"' IS READY TO BEGIN PROCESSING LIBRARIES...");
			LIBRARY_SUBCATEGORY_COUNT_THAT_PASSED_VERIFICATION++;
		}
		
		
		else {
			LIBRARY_SUBCATEGORY_COUNT_THAT_FAILED_VERIFICATION++;
			System.out.println(CONSOLE_SPACER_2+"LIBRARY: '"+CURRENT_FILE+"' IS CORRUPTED."+CONSOLE_SPACER_2);
		}
		
		
		}
		//+++END OF SUBCATEGORY LOOP+++//
		
		
	
		if (LIBRARY_SUBCATEGORY_COUNT_THAT_PASSED_VERIFICATION==LIBRARY_SUBCATEGORY_FOLDER_COUNT) {
			LIBRARY_COUNT_THAT_PASSED_VERIFICATION++;
		}
		
		
		if (LIBRARY_SUBCATEGORY_COUNT_THAT_FAILED_VERIFICATION>=1) {
			LIBRARY_COUNT_THAT_FAILED_VERIFICATION++;
		}
		
		
		
		
		
		
		
		LIBRARY_SUBCATEGORY_FOLDER_COUNT=0;
		LIBRARY_SUBCATEGORY_COUNT_THAT_PASSED_VERIFICATION=0;
		LIBRARY_SUBCATEGORY_COUNT_THAT_FAILED_VERIFICATION=0;
		
		
		}
		//+++END OF LIBRARY LOOP+++//
		
		
		
		
		if (LIBRARY_COUNT_THAT_PASSED_VERIFICATION==TOTAL_AI_LIBRARIES_DEFAULT) {
			
			if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
			System.out.println("ALL LIBRARIES PASSED VERIFICATION AND ARE GOOD TO GO.");
			}
			//+++END OF CONDITION+++//
			
			DID_ALL_LIBRARIES_PASS_VERIFICATION="YES";
		}
		
		
		if (LIBRARY_COUNT_THAT_FAILED_VERIFICATION>0) {
			System.out.println(CONSOLE_SPACER_4+"PROGRAM CONTAINS "+LIBRARY_COUNT_THAT_FAILED_VERIFICATION+" LIBRARIES THAT FAILED VERIFICATION."+CONSOLE_SPACER_4);
			DID_ALL_LIBRARIES_PASS_VERIFICATION="NO";
		}
		
		
		
		if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
			
		System.out.println();
		System.out.println();
		
		}
		
		
		//+++++++++++++++++++++++++++++++++++++++++++++++++++//
		//+++END OF VERIFYING LIBRARIES ARE CORRECT FORMAT+++//
		//+++++++++++++++++++++++++++++++++++++++++++++++++++//
		
		
		//------------------------------------------------------------------------------------------------------------------------------------------------//
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		




		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//


		//++++++++++++//
		//+++ENGINE+++//
		//++++++++++++//
		
		
		for (A=0;A<=DATA_LENGTH;A++) {

			
			try {
			DETECT_1_CHAR=DATA.substring(A,A+1);
			DETECT_3_CHARS=DATA.substring(A,A+3);
			}
			catch (StringIndexOutOfBoundsException e) {}
			
		
			
			
			//+++GET ALPHABET COUNT+++//
			if (DETECT_1_CHAR.equals(A_UC) || DETECT_1_CHAR.equals(B_UC) || DETECT_1_CHAR.equals(C_UC) || DETECT_1_CHAR.equals(D_UC) || DETECT_1_CHAR.equals(E_UC) || DETECT_1_CHAR.equals(F_UC) || DETECT_1_CHAR.equals(G_UC) || DETECT_1_CHAR.equals(H_UC) || DETECT_1_CHAR.equals(I_UC) || DETECT_1_CHAR.equals(J_UC) || DETECT_1_CHAR.equals(K_UC) || DETECT_1_CHAR.equals(L_UC) || DETECT_1_CHAR.equals(M_UC) || DETECT_1_CHAR.equals(N_UC) || DETECT_1_CHAR.equals(O_UC) || DETECT_1_CHAR.equals(P_UC) || DETECT_1_CHAR.equals(Q_UC) || DETECT_1_CHAR.equals(R_UC) || DETECT_1_CHAR.equals(S_UC) || DETECT_1_CHAR.equals(T_UC) || DETECT_1_CHAR.equals(U_UC) || DETECT_1_CHAR.equals(V_UC) || DETECT_1_CHAR.equals(W_UC) || DETECT_1_CHAR.equals(X_UC) || DETECT_1_CHAR.equals(Y_UC) || DETECT_1_CHAR.equals(Z_UC)) {
				ALPHABET_COUNT=ALPHABET_COUNT+1;
			}
			
			
			//+++GET MATH OPERATOR COUNT+++//
			if (DETECT_1_CHAR.equals("+") || DETECT_1_CHAR.equals("-") || DETECT_1_CHAR.equals("*") || DETECT_1_CHAR.equals("/")) {
				MATH_OPERATOR_COUNT=MATH_OPERATOR_COUNT+1;
			}

			
			//+++GET NUMBER COUNT+++//
			if (DETECT_1_CHAR.equals("0") || DETECT_1_CHAR.equals("1") || DETECT_1_CHAR.equals("2") || DETECT_1_CHAR.equals("3") || DETECT_1_CHAR.equals("4") || DETECT_1_CHAR.equals("5") || DETECT_1_CHAR.equals("6") || DETECT_1_CHAR.equals("7") || DETECT_1_CHAR.equals("8") || DETECT_1_CHAR.equals("9")) {
				NUMBER_COUNT=NUMBER_COUNT+1;
			}
			
			
			//+++GET COMMA COUNT+++//
			if (DETECT_1_CHAR.equals(",")) {
				COMMA_COUNT=COMMA_COUNT+1;
			}
			
			
			//+++GET QUESTION MARK COUNT+++//
			if (DETECT_1_CHAR.equals("?")) {
				QUESTION_MARK_COUNT=QUESTION_MARK_COUNT+1;
			}
			
			

			//+++SET OBJECT COUNT+++//
			OBJECT_COUNT=TOTAL_SPACE_COUNT+1;
			
			
			
			
			
			

			
			
			//++++++++++++++++++++++++++++++++++//
			//+++WORD PROCESSING TURBOCHARGED+++//
			//++++++++++++++++++++++++++++++++++//
			
			RECYCABLE_STRING_1="";
			RECYCABLE_STRING_2="";
			
			
			if (KEY==0) {
				WORD=DETECT_1_CHAR+WORD;
			}
			//+++END OF CONDITION+++//
			
			
			
			if (DETECT_1_CHAR.equals(" ") || DETECT_1_CHAR.equals(",") || DETECT_1_CHAR.equals(".") || DETECT_1_CHAR.equals("?") || DETECT_1_CHAR.equals("!") || DETECT_1_CHAR.equals(", ")) {
				KEY=1;
				WORD_LENGTH=WORD.length();
				
				
				//+++CORRECT WORD CHARACTER ARRANGEMENT+++//
				for (RECYCABLE_INT_1=1;RECYCABLE_INT_1<=WORD_LENGTH;RECYCABLE_INT_1++) {
					
					try {
					RECYCABLE_STRING_1=WORD.substring(RECYCABLE_INT_1,RECYCABLE_INT_1+1);
					}
					
					catch (StringIndexOutOfBoundsException e) {}
					
					
					XWORD=RECYCABLE_STRING_1+XWORD;
					
				}
				//+++END OF LOOP+++//
				
				
				
				XWORD_LENGTH=XWORD.length();
				
				
				
				
				
				
				//+++CORRECT WORD+++//
				try {
				XXWORD=XWORD.substring(1,XWORD_LENGTH);
				}
				
				catch (StringIndexOutOfBoundsException e) {}
				
				
				
				
				
				//System.out.println("XXWORD="+XXWORD);
				XXWORD_LENGTH=XXWORD.length();
				XXWORD_LENGTH_STRING=String.valueOf(XXWORD_LENGTH);
				
				
				WORD_COUNT=WORD_COUNT+1;
				WORD_COUNT_STRING=String.valueOf(WORD_COUNT);
				
				//System.out.println("FILE NAME ORDER="+WORD_COUNT_STRING);
				
				
				
				
				FILE_NAME="WORD_"+WORD_COUNT_STRING+".txt";
				FILE_DIRECTORY=WORD_PROCESSING_FOLDER_1+FILE_NAME;
				//System.out.println(FILE_DIRECTORY);
				
				
				//+++VERIFY THAT WORD LENGTH IS GREATER THAN 0+++//
				if (XXWORD_LENGTH>0) {
				
					
				
				
				//+++SAVE WORD+++//
				try {
					FileWriter FILE_WRITER=new FileWriter(FILE_DIRECTORY);
					FILE_WRITER.write(XXWORD);
					FILE_WRITER.close();
				}

				catch (IOException e) {}
				//+++END OF SAVING WORD+++//
				
				
				
				
				
				//+++SAVE WORD AGAIN WITH ENTER FOR DEEPER PROCESSING+++//
				FILE_NAME="WORD_"+WORD_COUNT_STRING+".txt";
				FILE_DIRECTORY=EXTRA_WORD_PROCESSING_FOLDER_DIRECTORY+FILE_NAME;
				try {
					FileWriter FILE_WRITER=new FileWriter(FILE_DIRECTORY);
					FILE_WRITER.write(XXWORD+ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}
				//---END OF SAVE WORD AGAIN FOR DEEPER PROCESSING---//
				
				
				
				
				
				
				}
				//+++END OF CONDITION VERIFYING WORD LENGTH IS > 0+++//
				
				//----------------------------------------------------------------------------------//
				
				
				FILE_NAME="WORD_"+WORD_COUNT_STRING+"_LENGTH.TXT";
				FILE_DIRECTORY=WORD_PROCESSING_FOLDER_3+FILE_NAME;
				//System.out.println(FILE_DIRECTORY);
				
				
				//+++SAVE WORD LENGTH+++//
				try {
					FileWriter FILE_WRITER=new FileWriter(FILE_DIRECTORY);
					FILE_WRITER.write(XXWORD_LENGTH_STRING);
					FILE_WRITER.close();
				}

				catch (IOException e) {}
				
				
				
				
				
				
				
				
				
	//----------------------------------------------------------------------------------------------//			
				
				
				
				
				if (DID_ALL_LIBRARIES_PASS_VERIFICATION.equals("YES")) {
				
				//+++SIMPLIFIED LIBRARY PROCESSING - BETA FEATURE+++//
				//System.out.println("SIMPLIFIED LIBRARY PROCESSING...TOTAL LIBRARIES="+TOTAL_AI_LIBRARIES_DEFAULT);
				
				
				//+++LIBRARY LOOP+++//
				for (B=0;B<=TOTAL_AI_LIBRARIES_FOR_LOOP;B++) {
					
					C=B+1;
					
					CURRENT_FILE=AI_LIBRARY_FILES_FILE[B];
					
					
					FOLDER_1_DIRECTORY=AI_LIBRARY_FOLDER_DIRECTORY+CURRENT_FILE+"/";
					
					
					//+++GET TOTAL SUBCATEGORY FOLDER COUNT+++//
					File FOLDER_1_DIRECTORY_FILE=new File(FOLDER_1_DIRECTORY);
					String[] AI_LIBRARY_SUBCATEGORY_FOLDER_FILE=FOLDER_1_DIRECTORY_FILE.list();
					LIBRARY_NUMBER_1=AI_LIBRARY_SUBCATEGORY_FOLDER_FILE.length;
					
					//System.out.println("THERE ARE "+LIBRARY_NUMBER_1+" FILES/FOLDERS IN '"+CURRENT_FILE+"' LIBRARY");
					
					
					for (D=0;D<=LIBRARY_NUMBER_1-1;D++) {
					
					try {
					CURRENT_FILE_2=AI_LIBRARY_SUBCATEGORY_FOLDER_FILE[D];	
					} 
					catch (ArrayIndexOutOfBoundsException a) {}
					
					
					try {
					RECYCABLE_STRING_2=CURRENT_FILE_2.substring(0,11);
					}
					catch (StringIndexOutOfBoundsException e) {}
					
					
						
					FOLDER_2_DIRECTORY=FOLDER_1_DIRECTORY+CURRENT_FILE_2;
					File FOLDER_2_DIRECTORY_FILE=new File(FOLDER_2_DIRECTORY);
					
					if (FOLDER_2_DIRECTORY_FILE.isDirectory() && RECYCABLE_STRING_2.equalsIgnoreCase("Subcategory")) {
						//System.out.println("SUBATEGORY PICKED UP AND READY FOR PROCESSING. XXX");
						LIBRARY_SUBCATEGORY_FOLDER_COUNT++;
					}
					
				
					
					}
					//+++END OF GETTING SUBCATEGORY COUNT LOOP+++//
					
					
				
					//System.out.println("'"+CURRENT_FILE+"' HAS A TOTAL OF "+LIBRARY_SUBCATEGORY_FOLDER_COUNT+" SUBCATEGORIES.");
					
					
					
					
					
					//+++SUBCATEGORY LOOP+++//
					for (E=0;E<=LIBRARY_SUBCATEGORY_FOLDER_COUNT-1;E++) {
					
						F=E+1;
						
						//+++SUBCATEGORY FOLDER DIRECTORY+++//
						FOLDER_3_DIRECTORY=FOLDER_1_DIRECTORY+"Subcategory_"+F+"/";
						FILE_NAME_1="Main_Category.txt";
						FILE_NAME_2="Subcategory_"+F+".txt";
						FILE_NAME_3="All_Terms.txt";
						
						
						FILE_1_DIRECTORY=FOLDER_1_DIRECTORY+FILE_NAME_1;
						FILE_2_DIRECTORY=FOLDER_3_DIRECTORY+FILE_NAME_2;
						FILE_3_DIRECTORY=FOLDER_3_DIRECTORY+"TERMS/"+FILE_NAME_3;
						
						
						//System.out.println("FILE 1 DIRECTORY="+FILE_1_DIRECTORY);
						//System.out.println("FILE 2 DIRECTORY="+FILE_2_DIRECTORY);
						//System.out.println("FILE 3 DIRECTORY="+FILE_3_DIRECTORY);
						
						File LIBRARY_MAIN_CATEGORY_FILE=new File(FILE_1_DIRECTORY);
						File LIBRARY_SUBCATEGORY_FILE=new File(FILE_2_DIRECTORY);
						File LIBRARY_TERMS_FILE=new File(FILE_3_DIRECTORY);
						
						
						
	//+++READ TERMS FILE, AND IF THERE IS A MATCH - THEN ALSO READ MAIN AND SUB CATEGORY AND RECORD.+++//
					
					//+++READ TERMS FILE AND SEARCH FOR A MATCH+++//
						Scanner myReader4=new Scanner (LIBRARY_TERMS_FILE);
						while (myReader4.hasNextLine()) {
							FILE_3_DATA=myReader4.nextLine();
							
							if (FILE_3_DATA.equalsIgnoreCase(XXWORD) && XXWORD_LENGTH>0) {
								//System.out.println(CONSOLE_SPACER_4+"WORD '"+XXWORD+"' FOUND IN "+"'"+CURRENT_FILE+"' LIBRARY."+CONSOLE_SPACER_4);
								
								
								//+++GET MAIN CATEGORY+++//
								Scanner myReader5=new Scanner (LIBRARY_MAIN_CATEGORY_FILE);
								while (myReader5.hasNextLine()) {
									FILE_1_DATA=myReader5.nextLine();
								}
								myReader5.close();
								
								//+++GET SUBCATEGORY+++//
								Scanner myReader6=new Scanner (LIBRARY_SUBCATEGORY_FILE);
								while (myReader6.hasNextLine()) {
									FILE_2_DATA=myReader6.nextLine();
								}
								myReader6.close();
								
								
								
								//+++SAVE TO WORD CLASSIFICATION+++//
								FILE_NAME_4="WORD_"+WORD_COUNT_STRING+"_MAIN_CLASSIFICATION.txt";
								FILE_NAME_5="WORD_"+WORD_COUNT_STRING+"_SUB_CLASSIFICATION.txt";
								
								FILE_4_DIRECTORY=DATA_PROCESSING_FOLDER_DIRECTORY+"CLASSIFICATION/"+FILE_NAME_4;
								FILE_5_DIRECTORY=DATA_PROCESSING_FOLDER_DIRECTORY+"CLASSIFICATION/"+FILE_NAME_5;
								
								
								//System.out.println("FILE 4 DIR="+FILE_4_DIRECTORY);
								//System.out.println("FILE 5 DIR="+FILE_5_DIRECTORY);
								
								//+++SAVE MAIN CLASSIFICATION+++//
								try {
									FileWriter FILE_WRITER=new FileWriter(FILE_4_DIRECTORY);
									FILE_WRITER.write(FILE_1_DATA);
									FILE_WRITER.close();
								}

								catch (IOException e) {}
								
								
								//+++SAVE SUB CLASSIFICATION+++//
								try {
									FileWriter FILE_WRITER=new FileWriter(FILE_5_DIRECTORY);
									FILE_WRITER.write(FILE_2_DATA);
									FILE_WRITER.close();
								}

								catch (IOException e) {}
								
								
								
								FILE_4_DATA=FILE_1_DATA+" "+FILE_4_DATA;
								
								
								//+++BETA+++//
								FILE_1_DATA="";
								FILE_2_DATA="";
								FILE_3_DATA="";
								
								
								
							}
							//+++END OF WORD MATCH FOUND+++//
							
							
						}
						myReader4.close();
	
	
						
						
					}
					//+++END OF SUBCATEGORIES PROCESSING LOOP+++//
					

					
					
					LIBRARY_SUBCATEGORY_FOLDER_COUNT=0;
					
					
					
					
					
				}
				//+++END OF LIBRARY PROCESSING LOOP+++//
				
				
				}
				//+++END OF VERIFICATION CONDITION THAT ALL LIBRARIES ARE GOOD TO GO+++//
				
				
				//++++++++++++++++++++++++++++++++++++++++++++//
				//+++END OF PROCESSING DATA USING LIBRARIES+++//
				//++++++++++++++++++++++++++++++++++++++++++++//
				
				
	//---------------------------------------------------------------------------------------------//
				
				
				
	
				
				//++++++++++++++++++//			
				//+++CLEAR VALUES+++//
				//++++++++++++++++++//
				
				WORD="";
				XWORD="";
				XXWORD="";
				XWORD_LENGTH=0;
				WORD_LENGTH=0;
				KEY=0;
				RECYCABLE_INT_1=0;
				RECYCABLE_INT_4=0;
				
				//++++++++++++++++++++++++++++//
				//+++END OF CLEARING VALUES+++//
				//++++++++++++++++++++++++++++//
				
				
				
			}
			//+++END OF CONDITON+++//
			
			
			
			
			
			
			//+++++++++++++++++++++++++++++++++++++++++//
			//+++END OF WORD PROCESSING TURBOCHARGED+++//
			//+++++++++++++++++++++++++++++++++++++++++//
			
			
			
			
		//----------------------------------------------------------------------------------------------------------------------//	
			
		
	
	
			}
			//+++++++++++++++++++//
			//+++END OF ENGINE+++//
			//+++++++++++++++++++//



			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//

			
			
			
			
			
			
			
			
			//------------------------------------------------------------------------------------------------------------------------------------------------------------------------//





			


			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			//+++LATEST AI INNOVATION - PROGRAM THE AI THROUGH CONVERSATION+++//
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//





			//+++++++++++++++++++++++++++++++++//
			//+++NEW AI - BY EMILE DOMINIQUE+++//
			//+++++++++++++++++++++++++++++++++//



			/*

			 NOTES:

			 This program intends to live up to it's name, and learn. The process is very
			 simple, and takes less effort and time than earlier editions of EXP.

			 FEATURES:


			 This Model will allow me to program the AI through conversation.

			 */






			/*



			//+++ALL VARIABLES+++//
			String THE_WHO_DATABASE_FILE_DIRECTORY="";
			String THE_WHAT_DATABASE_FILE_DIRECTORY="";
			String THE_WHEN_DATABASE_FILE_DIRECTORY="";
			String THE_WHERE_DATABASE_FILE_DIRECTORY="";
			String THE_WHY_DATABASE_FILE_DIRECTORY="";
			String THE_HOW_DATABASE_FILE_DIRECTORY="";
			String THE_PHYSICAL_OBJECT_DATABASE_FILE_DIRECTORY="";
			String THE_FILLER_DATABASE_FILE_DIRECTORY="";

			String CURRENT_WHO_DATABASE_DATA="";
			String CURRENT_WHAT_DATABASE_DATA="";
			String CURRENT_WHEN_DATABASE_DATA="";
			String CURRENT_WHERE_DATABASE_DATA="";
			String CURRENT_WHY_DATABASE_DATA="";
			String CURRENT_HOW_DATABASE_DATA="";
			String CURRENT_FILLER_DATABASE_DATA="";
			String CURRENT_PHYSICAL_OBJECT_DATABASE_DATA="";

			String UPDATED_WHO_DATABASE_DATA="";
			String UPDATED_WHAT_DATABASE_DATA="";
			String UPDATED_WHEN_DATABASE_DATA="";
			String UPDATED_WHERE_DATABASE_DATA="";
			String UPDATED_WHY_DATABASE_DATA="";
			String UPDATED_HOW_DATABASE_DATA="";
			String UPDATED_FILLER_DATABASE_DATA="";
			String UPDATED_PHYSICAL_OBJECT_DATA="";

			String UPDATED_WORD_DATABASE_DATA="";
			String I_STRING="";
			String AI_SAVED_WORDS_FOLDER_DIRECTORY=AI_FOLDER_DIRECTORY+"WORD_PROCESSING/WORDS/";
			String WORDS_COMBINED="";
			String NEW_AI_DATA="";
			String NEW_AI_DATA_CAPITALIZED="";
			String WORD_FROM_FILE="";
			String DOES_WORD_MATCH_WORD_DATABASE_RECORD="";
			String WHO_COMBINED="";
			String WHAT_COMBINED="";
			String WHEN_COMBINED="";
			String WHERE_COMBINED="";
			String WHY_COMBINED="";
			String HOW_COMBINED="";
			String PHYSICAL_OBJECT_COMBINED="";
			String FILLER_COMBINED="";
			
			String WHO_DATABASE_DATA="";
			String WHAT_DATABASE_DATA="";
			String WHEN_DATABASE_DATA="";
			String WHERE_DATABASE_DATA="";
			String WHY_DATABASE_DATA="";
			String HOW_DATABASE_DATA="";
			String FILLER_DATABASE_DATA="";
			String PHYSICAL_OBJECT_DATABASE_DATA="";

			String THE_WHO_DATA_TO_SAVE="";
			//String 





			int WHO_DATABASE_LENGTH=0;
			int WHAT_DATABASE_LENGTH=0;
			int WHEN_DATABASE_LENGTH=0;
			int WHERE_DATABASE_LENGTH=0;
			int WHY_DATABASE_LENGTH=0;
			int HOW_DATABASE_LENGTH=0;
			int PHYSICAL_OBJECT_DATABASE_LENGTH=0;
			int FILLER_DATABASE_LENGTH=0;





			int WORDS_IN_DATABASE_COUNT=0;
			int TOTAL_WORDS=0;
			int ACTIVATION_KEY_3=0;
			int ACTIVATION_KEY_4=0;
			int ACTIVATION_KEY_5=0;
			int ACTIVATION_KEY_6=0;
			int ACTIVATION_KEY_7=0;
			int ACTIVATION_KEY_8=0;
			int ACTIVATION_KEY_9=0;
			int ACTIVATION_KEY_10=0;


			//+++END OF VARIABLES+++//







			//+++++++++++++++++++++++++//
			//+++CREATE NEEDED FILES+++//
			//+++++++++++++++++++++++++//




			//+++CREATE WORD DATABASE FILE IF NEEDED+++//
			WORD_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/Word_DataBase.txt";
			File WORD_DATABASE_CREATE_FILE=new File(WORD_DATABASE_FILE_DIRECTORY);

			if (WORD_DATABASE_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(WORD_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				} catch (IOException e) {}
			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING WORD DATABASE FILE IF NEEDED+++//





			//+++CREATE THE WHO FILE IF NEEDED+++//
			THE_WHO_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/The_Who_DataBase.txt";
			File THE_WHO_CREATE_FILE=new File(THE_WHO_DATABASE_FILE_DIRECTORY);
			if (THE_WHO_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_WHO_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write("");
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE WHO FILE IF NEEDED+++//






			//+++CREATE THE WHAT FILE IF NEEDED+++//
			THE_WHAT_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/The_What_DataBase.txt";
			File THE_WHAT_CREATE_FILE=new File(THE_WHAT_DATABASE_FILE_DIRECTORY);
			if (THE_WHAT_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_WHAT_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE WHAT FILE IF NEEDED+++//









			//+++CREATE THE WHEN FILE IF NEEDED+++//
			THE_WHEN_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/The_When_DataBase.txt";
			File THE_WHEN_CREATE_FILE=new File(THE_WHEN_DATABASE_FILE_DIRECTORY);
			if (THE_WHEN_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_WHEN_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE WHEN FILE IF NEEDED+++//








			//+++CREATE THE WHERE FILE IF NEEDED+++//
			THE_WHERE_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/The_Where_DataBase.txt";
			File THE_WHERE_CREATE_FILE=new File(THE_WHERE_DATABASE_FILE_DIRECTORY);
			if (THE_WHERE_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_WHERE_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE WHERE FILE IF NEEDED+++//











			//+++CREATE THE WHY FILE IF NEEDED+++//
			THE_WHY_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/The_Why_DataBase.txt";
			File THE_WHY_CREATE_FILE=new File(THE_WHY_DATABASE_FILE_DIRECTORY);
			if (THE_WHY_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_WHY_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE WHY FILE IF NEEDED+++//


















			//+++CREATE THE WHEN FILE IF NEEDED+++//
			THE_HOW_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/The_How_DataBase.txt";
			File THE_HOW_CREATE_FILE=new File(THE_HOW_DATABASE_FILE_DIRECTORY);
			if (THE_HOW_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_HOW_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE HOW FILE IF NEEDED+++//









			//+++CREATE THE PHYSICAL OBJECT FILE IF NEEDED+++//
			THE_PHYSICAL_OBJECT_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/Physical_Object_DataBase.txt";
			File THE_PHYSICAL_OBJECT_CREATE_FILE=new File(THE_PHYSICAL_OBJECT_DATABASE_FILE_DIRECTORY);
			if (THE_PHYSICAL_OBJECT_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_PHYSICAL_OBJECT_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//

			//+++END OF CREATING THE PHYSICAL OBJECT FILE IF NEEDED+++//



			
			
			
			
			//+++CREATE THE FILLER FILE IF NEEDED+++//
			THE_FILLER_DATABASE_FILE_DIRECTORY=AI_MEMORY_FOLDER_DIRECTORY+"WORDS/Filler_DataBase.txt";
			File THE_FILLER_CREATE_FILE=new File(THE_FILLER_DATABASE_FILE_DIRECTORY);
			if (THE_FILLER_CREATE_FILE.exists()) {} 
			else {

				try {
					FileWriter FILE_WRITER=new FileWriter(THE_FILLER_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(ENTER);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++END OF ELSE CONDITION+++//
			
			
			
			
			
			
			
			//+++END OF CREATING THE FILLER FILE IF NEEDED+++//
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			


			//++++++++++++++++++++++++++++++++++//
			//+++END OF CREATING NEEDED FILES+++//
			//++++++++++++++++++++++++++++++++++//



			//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------//


































			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//


			//+++++++++++++++++//
			//+++NEW AI MENU+++//
			//+++++++++++++++++//

			System.out.println("New AI v1 - Learning In Progress...");
			System.out.println("-----------------------------------");
			System.out.println();


			RECYCABLE_STRING_1="";
			RECYCABLE_STRING_2="";
			RECYCABLE_STRING_3="";

			RECYCABLE_STRING_1_LENGTH=0;
			RECYCABLE_STRING_2_LENGTH=0;
			RECYCABLE_STRING_3_LENGTH=0;



			//++++++++++++++++++++++++++++++++++//
			//+++GET TOTAL WORDS IN DIRECTORY+++//
			//++++++++++++++++++++++++++++++++++//

			File GET_TOTAL_RAW_WORDS_SAVED=new File(AI_SAVED_WORDS_FOLDER_DIRECTORY);
			String[] getTotalWords=GET_TOTAL_RAW_WORDS_SAVED.list();

			//+++SUBTRACT 1 FOR 'EXTRA' FOLDER IN DIRECTORY; FOR ACCURACY+++//
			TOTAL_WORDS=getTotalWords.length-1;

			//+++++++++++++++++++++++++++++++++++++++++++++//
			//+++END OF GETTING TOTAL WORDS IN DIRECTORY+++//
			//+++++++++++++++++++++++++++++++++++++++++++++//


				
			
			
			
			//---------------------------------------------------------------------------------------------------------------------------------//


			//++++++++++//
			//+++LOOP+++//
			//++++++++++//

			for (I=1;I<=TOTAL_WORDS;I++) {

				I_STRING=String.valueOf(I);

				//+++READ WORDS THAT ARE SAVED ALREADY+++//
				WORD_FILE_DIRECTORY="/sdcard/ARTIFICIAL INTELLIGENCE/WORD_PROCESSING/WORDS/EXTRA/WORD_"+I_STRING+".txt";






				//+++READ WORD DATABASE+++//
				try {	
					Scanner file_reader_2=new Scanner (WORD_DATABASE_FILE);
					while (file_reader_2.hasNextLine()) {
						RECYCABLE_STRING_2=file_reader_2.nextLine()+ENTER+RECYCABLE_STRING_2;
						RECYCABLE_STRING_2_LENGTH=RECYCABLE_STRING_2.length();
					}
					file_reader_2.close();
				} catch (FileNotFoundException e) {}
				//+++END OF READING WORD DATABASE+++//



System.out.println(WORD_FILE_DIRECTORY);



				//+++READ WORD+++//
				try {
					File EXTRA_WORD_FILE=new File(WORD_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(EXTRA_WORD_FILE);
					while (file_reader_1.hasNextLine())
					{
						RECYCABLE_STRING_1=file_reader_1.nextLine();
						RECYCABLE_STRING_1_LENGTH=RECYCABLE_STRING_1.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++END OF READING WORD+++//

				
	
	
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++//
	//+++BEGIN READING DATABASE FILES FOR DATA BRANCHES+++//
	//++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	//+++ENSURE THAT THE DATABASES ARE READ ONLY 1 TIME+++//
	if (ACTIVATION_KEY_6==0) {
				
				//+++READ WHO DATABASE+++//
				try {
					File WHO_FILE=new File(THE_WHO_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(WHO_FILE);
					while (file_reader_1.hasNextLine())
					{
						WHO_DATABASE_DATA=file_reader_1.nextLine()+ENTER+WHO_DATABASE_DATA;
						WHO_DATABASE_LENGTH=WHO_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++END OF READING WHO DATABASE+++//
				
				
				
				
				//+++READ WHAT DATABASE+++//
				try {
					File WHAT_FILE=new File(THE_WHAT_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(WHAT_FILE);
					while (file_reader_1.hasNextLine())
					{
						WHAT_DATABASE_DATA=file_reader_1.nextLine()+ENTER+WHAT_DATABASE_DATA;
						WHAT_DATABASE_LENGTH=WHAT_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++END OF READING WHAT DATABASE+++//
				
				
				
				
				
				//+++READ WHEN DATABASE+++//
				try {
					File WHEN_FILE=new File(THE_WHEN_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(WHEN_FILE);
					while (file_reader_1.hasNextLine())
					{
						WHEN_DATABASE_DATA=file_reader_1.nextLine()+ENTER+WHEN_DATABASE_DATA;
						WHEN_DATABASE_LENGTH=WHEN_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//++++++++++++++++++++++++//
				
				
				
				
				//+++READ WHERE DATABASE+++//
				try {
					File WHERE_FILE=new File(THE_WHERE_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(WHERE_FILE);
					while (file_reader_1.hasNextLine())
					{
						WHERE_DATABASE_DATA=file_reader_1.nextLine()+ENTER+WHERE_DATABASE_DATA;
						WHERE_DATABASE_LENGTH=WHERE_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++++++++++++++++++++++++//
				
				
				
				
				//+++READ WHY DATABASE+++//
				try {
					File WHY_FILE=new File(THE_WHY_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(WHY_FILE);
					while (file_reader_1.hasNextLine())
					{
						WHY_DATABASE_DATA=file_reader_1.nextLine()+ENTER+WHY_DATABASE_DATA;
						WHY_DATABASE_LENGTH=WHY_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++++++++++++++++++++++//
				
				
				
				
				//+++READ HOW DATABASE+++//
				try {
					File HOW_FILE=new File(THE_HOW_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(HOW_FILE);
					while (file_reader_1.hasNextLine())
					{
						HOW_DATABASE_DATA=file_reader_1.nextLine()+ENTER+HOW_DATABASE_DATA;
						HOW_DATABASE_LENGTH=HOW_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++++++++++++++++++++++//
				
				
				
				
				//+++READ FILLER DATABASE+++//
				try {
					File FILLER_FILE=new File(THE_FILLER_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(FILLER_FILE);
					while (file_reader_1.hasNextLine())
					{
						FILLER_DATABASE_DATA=file_reader_1.nextLine()+ENTER+FILLER_DATABASE_DATA;
						FILLER_DATABASE_LENGTH=FILLER_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//++++++++++++++++++++++++++//
				
				
				
				
				
				//+++READ PHYSICAL OBJECT DATABASE+++//
				try {
					File PHYSICAL_OBJECT_FILE=new File(THE_PHYSICAL_OBJECT_DATABASE_FILE_DIRECTORY);	
					Scanner file_reader_1=new Scanner(PHYSICAL_OBJECT_FILE);
					while (file_reader_1.hasNextLine())
					{
						PHYSICAL_OBJECT_DATABASE_DATA=file_reader_1.nextLine()+ENTER+PHYSICAL_OBJECT_DATABASE_DATA;
						PHYSICAL_OBJECT_DATABASE_LENGTH=PHYSICAL_OBJECT_DATABASE_DATA.length();
					}
					file_reader_1.close();
				} catch (FileNotFoundException e) {} 
				//+++++++++++++++++++++++++++++++++++//
				
				
				}
				//+++END OF ACTIVATION KEY 6 CONDITION+++//
				
				ACTIVATION_KEY_6=1;
				
		//+++++++++++++++++++++++++++++++++++//				
		//+++END OF READING DATABASE FILES+++//
		//+++++++++++++++++++++++++++++++++++//
				
				
				
	//--------------------------------------------------------------------------------------------------------------------------------------------------------//
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				


				//+++COMBINE SAVED WORDS+++//
				WORDS_COMBINED=RECYCABLE_STRING_1+ENTER+WORDS_COMBINED;



				
				
				
				
				
				
				



				//+++++++++++++++++++++++//
				//+++CHECK FOR A MATCH+++//
				//+++++++++++++++++++++++//

				RECYCABLE_STRING_3=RECYCABLE_STRING_2.toUpperCase();

				if (RECYCABLE_STRING_3.contains(RECYCABLE_STRING_1)) {
					DOES_WORD_MATCH_WORD_DATABASE_RECORD="TRUE";
					System.out.println("The word "+RECYCABLE_STRING_1+" exists inside the database.");
					INCREASE++;
					if (TOTAL_WORDS==INCREASE) {System.out.println("No further action is required.");}
				}
				//+++END OF CONDITION+++//

				else {
					DOES_WORD_MATCH_WORD_DATABASE_RECORD="FALSE";
				}
				//+++END OF ELSE CONDITION+++//


				//+++++++++++++++++++++++++++++++++//
				//+++END OF CHECKING FOR A MATCH+++//
				//+++++++++++++++++++++++++++++++++//			



				//---------------------------------------------------------------------------------------------------------------------------------------------------------------------//



				//+++++++++++++++++++++++++++++++++++++++++++//
				//+++SORT EACH WORD TO THE PROPER LOCATION+++//
				//+++++++++++++++++++++++++++++++++++++++++++//

				if (DOES_WORD_MATCH_WORD_DATABASE_RECORD.equalsIgnoreCase("FALSE")) {



					System.out.println("I never known the word "+RECYCABLE_STRING_1+". Is "+RECYCABLE_STRING_1+" a who, what, when, where, why, how, a filler word, or a physical object?");
					NEW_AI_DATA="";
					Scanner text_input = new Scanner(System.in);
					NEW_AI_DATA = text_input.nextLine();
					NEW_AI_DATA_CAPITALIZED=NEW_AI_DATA.toUpperCase();







					//+++++++++++++++++//
					//+++PROCESS WHO+++//
					//+++++++++++++++++//


					//+++WRITE UPDATED DATA+++//
					if (NEW_AI_DATA_CAPITALIZED.contains("WHO")) {



						WHO_COMBINED=RECYCABLE_STRING_1+ENTER+WHO_COMBINED;

						
						
						if (WHO_DATABASE_LENGTH<=1) {
							THE_WHO_DATA_TO_SAVE=ENTER+WHO_COMBINED;
						}
						//+++END OF CONDITION+++//
						
						
						
						if (WHO_DATABASE_LENGTH>1) {
							THE_WHO_DATA_TO_SAVE=WHO_DATABASE_DATA+WHO_COMBINED;
						}
						//+++END OF CONDITION+++//
						
						
						
						
						
						try {
							FileWriter FILE_WRITER=new FileWriter(THE_WHO_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(WHO_DATABASE_DATA+WHO_COMBINED);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//


					//+++++++++++++++++++++++++++//
					//+++END OF PROCESSING WHO+++//
					//+++++++++++++++++++++++++++//







					//++++++++++++++++++//
					//+++PROCESS WHAT+++//
					//++++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("WHAT")) {


						WHAT_COMBINED=RECYCABLE_STRING_1+ENTER+WHAT_COMBINED;


						try {
							FileWriter FILE_WRITER=new FileWriter(THE_WHAT_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(WHAT_COMBINED);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//++++++++++++++++++++++++++++//
					//+++END OF PROCESSING WHAT+++//
					//++++++++++++++++++++++++++++//






					//++++++++++++++++++//
					//+++PROCESS WHEN+++//
					//++++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("WHEN")) {


						WHEN_COMBINED=RECYCABLE_STRING_1+ENTER+WHEN_COMBINED;


						try {
							FileWriter FILE_WRITER=new FileWriter(THE_WHEN_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(WHEN_COMBINED);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//++++++++++++++++++++++++++++//
					//+++END OF PROCESSING WHEN+++//
					//++++++++++++++++++++++++++++//








					//+++++++++++++++++++//
					//+++PROCESS WHERE+++//
					//+++++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("WHERE")) {


						WHERE_COMBINED=RECYCABLE_STRING_1+ENTER+WHERE_COMBINED;


						try {
							FileWriter FILE_WRITER=new FileWriter(THE_WHERE_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(WHERE_COMBINED);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//+++++++++++++++++++++++++++++//
					//+++END OF PROCESSING WHERE+++//
					//+++++++++++++++++++++++++++++//








					//+++++++++++++++++//
					//+++PROCESS WHY+++//
					//+++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("WHY")) {


						WHY_COMBINED=RECYCABLE_STRING_1+ENTER+WHY_COMBINED;


						try {
							FileWriter FILE_WRITER=new FileWriter(THE_WHY_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(WHY_COMBINED);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//+++++++++++++++++++++++++++//
					//+++END OF PROCESSING WHY+++//
					//+++++++++++++++++++++++++++//











					//+++++++++++++++++//
					//+++PROCESS HOW+++//
					//+++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("HOW")) {

						HOW_COMBINED=RECYCABLE_STRING_1+ENTER+HOW_COMBINED;

						try {
							FileWriter FILE_WRITER=new FileWriter(THE_HOW_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(RECYCABLE_STRING_1+ENTER);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//+++++++++++++++++++++++++++//
					//+++END OF PROCESSING HOW+++//
					//+++++++++++++++++++++++++++//






					//++++++++++++++++++++//
					//+++PROCESS FILLER+++//
					//++++++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("FILLER")) {
						try {
							FileWriter FILE_WRITER=new FileWriter(THE_FILLER_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(RECYCABLE_STRING_1+ENTER);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//++++++++++++++++++++//
					//+++PROCESS FILLER+++//
					//++++++++++++++++++++//









					//+++++++++++++++++++++++++++++//
					//+++PROCESS PHYSICAL OBJECT+++//
					//+++++++++++++++++++++++++++++//

					if (NEW_AI_DATA_CAPITALIZED.contains("OBJECT")) {

						PHYSICAL_OBJECT_COMBINED=RECYCABLE_STRING_1+ENTER+PHYSICAL_OBJECT_COMBINED;

						try {
							FileWriter FILE_WRITER=new FileWriter(THE_PHYSICAL_OBJECT_DATABASE_FILE_DIRECTORY);
							FILE_WRITER.write(RECYCABLE_STRING_1+ENTER);
							FILE_WRITER.close();
						} catch (IOException e) {}
					}
					//+++END OF CONDITION+++//

					//+++++++++++++++++++++++++++++++++++++++//
					//+++END OF PROCESSING PHYSICAL OBJECT+++//
					//+++++++++++++++++++++++++++++++++++++++//







				}
				//+++END OF ELSE CONDITION+++//



















				RECYCABLE_STRING_1="";
				RECYCABLE_STRING_2="";
				RECYCABLE_STRING_3="";




			}

			//+++++++++++++++++//
			//+++END OF LOOP+++//
			//+++++++++++++++++//


			//----------------------------------------------------------------------------------------------------------------//














			//+++++++++++++++++++++++++++++++++++++++++++++++//
			//+++NEW WORD MUST BE SAVED INTO WORD DATABASE+++//
			//+++++++++++++++++++++++++++++++++++++++++++++++//

			if (DOES_WORD_MATCH_WORD_DATABASE_RECORD.equalsIgnoreCase("FALSE")) {
				//System.out.println("The word "+RECYCABLE_STRING_1+" does not exist in the database.");


				if (RECYCABLE_STRING_3.length()<=1) {
					UPDATED_WORD_DATABASE_DATA=WORDS_COMBINED+ENTER;
				}
				//+++END OF CONDITION+++//





				if (RECYCABLE_STRING_3.length()>1) {
					//UPDATED_WORD_DATABASE_DATA=RECYCABLE_STRING_3+ENTER+RECYCABLE_STRING_1+ENTER;
					UPDATED_WORD_DATABASE_DATA=RECYCABLE_STRING_3+WORDS_COMBINED+ENTER;
				}
				//+++END OF CONDITION+++//









				try {
					FileWriter FILE_WRITER=new FileWriter(WORD_DATABASE_FILE_DIRECTORY);
					FILE_WRITER.write(UPDATED_WORD_DATABASE_DATA);
					FILE_WRITER.close();
				}

				catch (IOException e) {}

			}
			//+++++++++++++++++++++++++++++++++++++++++++++++//	
			//+++END OF NEW WORD BEING SAVED INTO DATABASE+++//
			//+++++++++++++++++++++++++++++++++++++++++++++++//



			//++++++++++++++++++++++++++++++//
			//+++END OF NEW AI INNOVATION+++//
			//++++++++++++++++++++++++++++++//








			//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//





			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			//+++END OF NEW INNOVATION - PROGRAM THE AI THROUGH CONVERSATION+++//
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//








			//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//


			
			
			*/
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
		
		
	
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	//+++++++++++++++++++++++++++++++++//
	//+++PERFORMING REASONING MODULE+++//
	//+++++++++++++++++++++++++++++++++//
	
	
	if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
	
	System.out.println("PERFORMING REASONING MODULE...");
	System.out.println("------------------------------");
	System.out.println(CONSOLE_SPACER_2);
	System.out.println("ORIGINAL DATA:");
	System.out.println("--------------");
	System.out.println(UNALTERED_DATA);
	System.out.println(CONSOLE_SPACER_2);
	
	}
	//+++END OF CONDITION+++//
	
	
	
	
	
	//+++CLEAR VALUES+++//
	FILE_NAME_1="";
	FILE_NAME_2="";
	FILE_NAME_3="";
	FILE_1_DIRECTORY="";
	FILE_2_DIRECTORY="";
	FILE_3_DIRECTORY="";
	FILE_1_DATA="";
	FILE_2_DATA="";
	FILE_3_DATA="";
	FILE_1_LENGTH=0;
	FILE_2_LENGTH=0;
	FILE_3_LENGTH=0;
	
	
	//++++++++++++++++++++++++++++++++++++++//
	//+++BUILD MAIN PRE-REASONING SUMMARY+++//
	//++++++++++++++++++++++++++++++++++++++//
	for (I=1;I<=TOTAL_WORD_COUNT;I++) {
	
	A=TOTAL_WORD_COUNT;	
	
	if (I==1) {
	FILE_NAME_1="WORD_"+A+"_MAIN_CLASSIFICATION.txt";
	}
	
	if (I>1) {
	FILE_NAME_1="WORD_"+B+"_MAIN_CLASSIFICATION.txt";
	}
	
	
	
	FILE_1_DIRECTORY=WORD_PROCESSING_FOLDER_4+FILE_NAME_1;
	//System.out.println("FILE 1 DIRECTORY="+FILE_1_DIRECTORY);
	File FILE_1_DIRECTORY_FILE=new File(FILE_1_DIRECTORY);
	
	if (FILE_1_DIRECTORY_FILE.exists()) {
		//System.out.println(FILE_NAME_1+" EXISTS.");
		
		
		//+++READ MAIN CLASSIFICATION FILE+++//
		Scanner myReader7=new Scanner (FILE_1_DIRECTORY_FILE);
		while (myReader7.hasNextLine()) {
			REASONING_STRING_1=myReader7.nextLine();
			
			REASONING_STRING_2=REASONING_STRING_1+" + "+REASONING_STRING_2;
			REASONING_STRING_2_LENGTH=REASONING_STRING_2.length();
		}
		myReader7.close();
		
	}
	//+++END OF CONDITION+++//
	
	B=A-I;
	}
	//+++END OF LOOP+++//
	
	REASONING_NUMBER_1=REASONING_STRING_2_LENGTH-2;
	
	try {
	REASONING_STRING_5=REASONING_STRING_2.substring(0,REASONING_NUMBER_1);
	}
	catch (StringIndexOutOfBoundsException e) {}

	
	
	if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
	
	System.out.println("MAIN CATEGORY REASONING DATA:");
	System.out.println("-----------------------------");
	System.out.println(REASONING_STRING_5);
	
	}
	//+++END OF CONDITION+++//
	
	
	
	//+++++++++++++++++++++++++++++++++++++++//
	//+++END OF MAIN REASONING PRE-SUMMARY+++//
	//+++++++++++++++++++++++++++++++++++++++//
	
	
	
	//--------------------------------------------------------------------------------------------//
	
	
	//+++SPACER+++//
	if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
	System.out.println(CONSOLE_SPACER_2);
	}
	//+++END OF SPACER CONDITION+++//
	
	
	//+++++++++++++++++++++++++++++++++++++//
	//+++BUILD SUB PRE-REASONING SUMMARY+++//
	//+++++++++++++++++++++++++++++++++++++//
	for (I=1;I<=TOTAL_WORD_COUNT;I++) {
		
		A=TOTAL_WORD_COUNT;	


		if (I==1) {
			FILE_NAME_2="WORD_"+A+"_SUB_CLASSIFICATION.txt";
		}

		if (I>1) {
			FILE_NAME_2="WORD_"+B+"_SUB_CLASSIFICATION.txt";
		}
		
		
		
		FILE_2_DIRECTORY=WORD_PROCESSING_FOLDER_4+FILE_NAME_2;
		//System.out.println("FILE 2 DIRECTORY="+FILE_2_DIRECTORY);
		File FILE_2_DIRECTORY_FILE=new File(FILE_2_DIRECTORY);
		
		if (FILE_2_DIRECTORY_FILE.exists()) {
			//System.out.println(FILE_NAME_2+" EXISTS.");
			
			
			//+++READ SUB CLASSIFICATION FILE+++//
			Scanner myReader7=new Scanner (FILE_2_DIRECTORY_FILE);
			while (myReader7.hasNextLine()) {
				REASONING_STRING_3=myReader7.nextLine();

				REASONING_STRING_4=REASONING_STRING_3+" + "+REASONING_STRING_4;
				REASONING_STRING_4_LENGTH=REASONING_STRING_4.length();
			}
			myReader7.close();
			
			
			
			
			
			
			
		}
		//+++END OF CONDITION+++//
		
		
		B=A-I;
		
	}
	//+++END OF LOOP+++//
	
	
	REASONING_NUMBER_2=REASONING_STRING_4_LENGTH-2;
	
	try {
	REASONING_STRING_6=REASONING_STRING_4.substring(0,REASONING_NUMBER_2);
	}
	catch (StringIndexOutOfBoundsException e) {}
	
	
	if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
		
	System.out.println("SUB CATEGORY REASONING DATA:");
	System.out.println("----------------------------");
	System.out.println(REASONING_STRING_6);
	
	}
	//+++END OF CONDITION+++//
	
	//++++++++++++++++++++++++++++++++++++++//
	//+++END OF SUB REASONING PRE-SUMMARY+++//	
	//++++++++++++++++++++++++++++++++++++++//
	
	
	
	//+++++++++++++++++++++++++++++//
	//+++END OF REASONING MODULE+++//
	//+++++++++++++++++++++++++++++//
	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	
	
	/*
	//+++++++++++++++++++++++++++++++++++++//
	//+++PERFORMING COMPREHENSION MODULE+++//
	//+++++++++++++++++++++++++++++++++++++//
	
	System.out.println(CONSOLE_SPACER_2);
	System.out.println("COMPREHENSION DATA:");
	System.out.println("-------------------");
	
	
	//+++GET FIRST WORD+++//
		File FIRST_WORD_FILE=new File(WORD_PROCESSING_FOLDER_1+"WORD_1.TXT");
		
		Scanner myReader1=new Scanner (FIRST_WORD_FILE);
		while (myReader1.hasNextLine()) {
			WORD_1=myReader1.nextLine();
		}
		myReader1.close();
		//+++END OF FILE READING+++//
	
	//++END OF GETTING FIRST WORD+++//
	
	
	//------------------------------------------------------//
	
	
	//+++GET SECOND WORD+++//
	File SECOND_WORD_FILE=new File(WORD_PROCESSING_FOLDER_1+"WORD_2.TXT");
	
			Scanner myReader2=new Scanner (SECOND_WORD_FILE);
			while (myReader2.hasNextLine()) {
				WORD_2=myReader2.nextLine();
			}
			myReader2.close();
			//+++END OF FILE READING+++//
	
	
	//+++END OF GETTING SECOND WORD+++//
	
			
	
	
	
		//+++GET THIRD WORD+++//
			File THIRD_WORD_FILE=new File(WORD_PROCESSING_FOLDER_1+"WORD_3.TXT");

			Scanner myReader4=new Scanner (THIRD_WORD_FILE);
			while (myReader4.hasNextLine()) {
				WORD_3=myReader4.nextLine();
			}
			myReader4.close();
			//+++END OF FILE READING+++//


			//+++END OF GETTING THIRD WORD+++//

			
	
	
	
	

	
	
	
	
	
			FIRST_WORD=WORD_1;
			SECOND_WORD=WORD_2;
			THIRD_WORD=WORD_3;
			

			System.out.println();
			System.out.println("FIRST WORD: "+WORD_1);
			System.out.println("SECOND WORD: "+WORD_2);
			System.out.println("THIRD WORD: "+WORD_3);
			System.out.println();


			



			//++++++++++++++++++++++++++++++++++//
			//+++END OF DETERMINING DATA TYPE+++//
			//++++++++++++++++++++++++++++++++++//

*/


			//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//








			
			
			
			


			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			//+++SEARCH FOR APPLICABLE TERMS AND COMBINATION TERMS & GET DATA TYPE+++//
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			
		

				//++++++++++++++++++++++++++//
				//+++GET QUESTION CONTEXT+++//
				//++++++++++++++++++++++++++//

				

				//+++WHO CONTEXT+++//
				if (FIRST_WORD.equals("WHO")) {
					PRE_INTENTION_STRING_1="The user wants to know of a person, or thing responsible for something else,";
					DATA_TYPE="SENTENCE";
					SENTENCE_TYPE="QUESTION";
				}
				//+++END OF WHO CONTEXT+++//




				//+++WHAT CONTEXT+++//
				if (FIRST_WORD.equals("WHAT")) {
					PRE_INTENTION_STRING_1="The user wants to know of a thing, that is responsible for something else,";
					DATA_TYPE="SENTENCE";
					SENTENCE_TYPE="QUESTION";
				}
				//+++END OF WHAT CONTEXT+++//




				//+++WHEN CONTEXT+++//
				if (FIRST_WORD.equals("WHEN")) {
					PRE_INTENTION_STRING_1="The user wants to know when something will take place,";
					DATA_TYPE="SENTENCE";
					SENTENCE_TYPE="QUESTION";
				}
				//+++END OF WHEN CONTEXT+++//




				//+++WHERE CONTEXT+++//
				if (FIRST_WORD.equals("WHERE")) {
					PRE_INTENTION_STRING_1="The user wants to know the location of a person, place, or thing,";
					DATA_TYPE="SENTENCE";
					SENTENCE_TYPE="QUESTION";
				}
				//+++END OF WHERE CONTEXT+++//




				//+++WHY CONTEXT+++//
				if (FIRST_WORD.equals("WHY")) {
					PRE_INTENTION_STRING_1="The user wants to understand the reason something is the way it is,";
					DATA_TYPE="SENTENCE";
					SENTENCE_TYPE="QUESTION";
				}
				//+++END OF WHY CONTEXT+++//




				//+++HOW CONTEXT+++//
				if (FIRST_WORD.equals("HOW")) {
					PRE_INTENTION_STRING_1="The user wants instructions, or information about a person, place, or thing,";
					DATA_TYPE="SENTENCE";
					SENTENCE_TYPE="QUESTION";
				}
				//+++END OF HOW CONTEXT+++//



				//+++++++++++++++++++++++++++++++++++++//
				//+++END OF GETTING QUESTION CONTEXT+++//
				//+++++++++++++++++++++++++++++++++++++//




				//++++++++++++++++++++++++++++++++//
				//+++GET QUESTION-SENTENCE TIME+++// 
				//++++++++++++++++++++++++++++++++//



				//+++IN THE OFFICIAL AI, DO NOT USE CONTAINS. CHECK THE SECOND WORD FROM THE 
				//+++FILE SYSTEM. THAT IS RELIABLE AND ACCURATE.


				//+++PAST TENSE TIME+++//
				if (SECOND_WORD.equals("HAS") || SECOND_WORD.equals("DID") || SECOND_WORD.equals("WAS")) {
					TIME_TENSE="PAST";
					PRE_INTENTION_STRING_2="in the past";
				}
				//+++END OF PAST TENSE TIME+++//
				
							
				//+++PRESENT TENSE TIME+++//
				if (SECOND_WORD.equals("IS") || SECOND_WORD.equals("ARE")) {
					TIME_TENSE="PRESENT";
					PRE_INTENTION_STRING_2="in the present";
				}
				//+++END OF PRESENT TENSE TIME+++//


				//+++FUTURE TENSE TIME+++//
				if (SECOND_WORD.equals("WILL")) {
					TIME_TENSE="FUTURE";
					PRE_INTENTION_STRING_2="in the future";
				}
				//+++END OF FUTURE TENSE TIME+++//


				
				
				
				
				
				
				
				//+++++++++++++++++++++++++++//
				//+++GET STATEMENT CONTEXT+++//
				//+++++++++++++++++++++++++++//
				
				if (FIRST_WORD.equals("HE")) {
					SENTENCE_SUBJECT=FIRST_WORD;
				}
				//+++END OF CONDITION+++//
				
					
				if (FIRST_WORD.equals("SHE")) {
					SENTENCE_SUBJECT=FIRST_WORD;
				}
				//+++END OF CONDITION+++//
				
				
				if (FIRST_WORD.equals("I")) {
					SENTENCE_SUBJECT=FIRST_WORD;
				}
				//+++END OF CONDITION+++//
				
				
				if (FIRST_WORD.equals("WE")) {
					SENTENCE_SUBJECT=FIRST_WORD;
				}
				//+++END OF CONDITION+++//
				
				
				if (FIRST_WORD.equals("THEY")) {
					SENTENCE_SUBJECT=FIRST_WORD;
				}
				//+++END OF CONDITION+++//
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				//++++++++++++++++++++++++++++++++++//
				//+++END OF GET STATEMENT CONTEXT+++//
				//++++++++++++++++++++++++++++++++++//
				
				
				
				
				
				
				
				
				
				
				
				
				
				


				PRE_INTENTION_STRING_3=PRE_INTENTION_STRING_1+" "+PRE_INTENTION_STRING_2;

				if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
				System.out.println();
				System.out.println();
				System.out.println(PRE_INTENTION_STRING_3);
				System.out.println();
				System.out.println("The sentence has been detected as: "+SENTENCE_TYPE);
				}
				//+++END OF CONDITION+++//








				//+++++++++++++++++++++++++++++++++++++++//
				//+++END OF GET QUESTION-SENTENCE TIME+++//
				//+++++++++++++++++++++++++++++++++++++++//







			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			//+++END OF SEARCH FOR APPLICABLE TERMS AND COMBINATION TERMS+++//
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//



			//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//












			System.out.println();
			System.out.println();
			System.out.println();


			//+++CLEAR VALUES+++//
			FIRST_WORD="";
			SECOND_WORD="";

			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//+++++++++++++++++++++++++++++++++//
	//+++END OF COMPREHENSION MODULE+++//
	//+++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	//++++++++++++++++++++++++++++++++++//
	//+++DETERMINE AI EMPLOYEE NEEDED+++//
	//++++++++++++++++++++++++++++++++++//
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	//+++++++++++++++//
	//+++COUNSELOR+++//
	//+++++++++++++++//
	
	//+++DETECTION 1+++//
	if (DATA_CAPITALIZED.contains("SPEAK TO A THERAPIST") || DATA_CAPITALIZED.contains("SPEAK TO A COUNSELOR") || DATA_CAPITALIZED.contains("NEED TO TALK TO SOMEONE") || DATA_CAPITALIZED.contains("TALK TO A THERAPIST") || DATA_CAPITALIZED.contains("TALK TO A COUNSELOR") || DATA_CAPITALIZED.contains("I NEED TO SPEAK TO SOMEONE")) {
		
		DID_THE_USER_POTENTIALLY_INDICATE_THAT_THEY_NEED_TO_SPEAK_TO_A_COUNSELOR="YES";
		
	}	
	//+++END OF CONDITION+++//

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//+++CONFIRM THE USERS INTENTION+++//
	
	if (DID_THE_USER_POTENTIALLY_INDICATE_THAT_THEY_NEED_TO_SPEAK_TO_A_COUNSELOR.equals("YES")) {
	
	
		System.out.println("It seems like you want to talk to a counselor, or therapist. Is that correct?");
		Scanner potential_therapy_request = new Scanner(System.in);
       	String USER_HEALTH_TEXT = potential_therapy_request.nextLine();
		
		
		if (USER_HEALTH_TEXT.equalsIgnoreCase("YES")) {
			System.out.println("Ok, I am getting you over to a counselor now...");
			
			//+++TRANSFER TO COUNSELOR+++//
			
			// FEATURE NOT AVAILABLE
			System.out.println("Sorry, that feature is not available.");
			
		}
		//+++END OF CONDITION+++//
		
		if (USER_HEALTH_TEXT.equalsIgnoreCase("NO")) {
			System.out.println("Ok, well be more specific with what your saying. ");
		}
		//+++END OF CONDITION+++//
		
	}
	//+++END OF CONDITION+++//
	
	
	//++++++++++++++++++++++//
	//+++END OF COUNSELOR+++//
	//++++++++++++++++++++++//
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			
	
	
	
	
	
	
	
	
	
	
	
	
			
			
	//++++++++++++++++++++++++//
	//+++SOFTWARE DEVELOPER+++//
	//++++++++++++++++++++++++//
	
	
	//+++DETECTION 1+++//
	if (DATA_CAPITALIZED.contains("I NEED A APP MADE") || DATA_CAPITALIZED.contains("CREATE A APP") || DATA_CAPITALIZED.contains("BUILD A NEW APP") || DATA_CAPITALIZED.contains("BUILD AN NEW APP") || DATA_CAPITALIZED.contains("DESIGN A APP")) {
		
		DID_THE_USER_POTENTIALLY_INDICATE_THAT_THEY_NEED_TO_SPEAK_TO_A_SOFTWARE_DEVELOPER="YES";
			
	}
	//+++END OF CONDITION+++//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//+++CONFIRM THE USERS INTENTION+++//
	if (DID_THE_USER_POTENTIALLY_INDICATE_THAT_THEY_NEED_TO_SPEAK_TO_A_SOFTWARE_DEVELOPER.equals("YES")) {
		
		
		//+++FEATURE NOT AVAILABLE
		System.out.println("Sorry, that feature is not available.");
		
	}
	//+++END OF CONDITION+++//
	
	
	
	
	
	
	
	
	
	//+++++++++++++++++++++++++++++++//
	//+++END OF SOFTWARE DEVELOPER+++//
	//+++++++++++++++++++++++++++++++//
	
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//+++++++++++++++++++++++++++++++++++++++++//
	//+++END OF DETERMINE AI EMPLOYEE NEEDED+++//
	//+++++++++++++++++++++++++++++++++++++++++//
	
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
	
	
	
	
	
	
	
	if (DEVELOPMENT_MODE.equalsIgnoreCase("ON")) {
	System.out.println(CONSOLE_SPACER_4);
	}
	
	
	
	//+++++++++++++++++++++++++++++//
	//+++END OF REASONING MODULE+++//
	//+++++++++++++++++++++++++++++//
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
	
	
	
	

	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
		
			
			
			
			
			
			
			
			
			
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	//++++++++++++++++++++++++++//
	//+++PROCESS ACTION WORDS+++//
	//++++++++++++++++++++++++++//
	
	
	RECYCABLE_STRING_1="";
	RECYCABLE_STRING_2="";
	RECYCABLE_STRING_3="";
	RECYCABLE_STRING_4="";
	RECYCABLE_STRING_5="";
	RECYCABLE_STRING_1_LENGTH=0;
	RECYCABLE_STRING_2_LENGTH=0;
	RECYCABLE_STRING_3_LENGTH=0;
	RECYCABLE_STRING_4_LENGTH=0;
	RECYCABLE_STRING_5_LENGTH=0;
	
	//+++STEP 1 - GET THE FIRST WORD+++//
	
	RECYCABLE_STRING_1=WORD_PROCESSING_FOLDER_1+"WORD_1.txt";
	RECYCABLE_STRING_2=WORD_PROCESSING_FOLDER_1+"WORD_2.txt";
	RECYCABLE_STRING_3=WORD_PROCESSING_FOLDER_1+"WORD_3.txt";
	
	File WORD_1_FILE=new File(RECYCABLE_STRING_1);
	File WORD_2_FILE=new File(RECYCABLE_STRING_2);
	File WORD_3_FILE=new File(RECYCABLE_STRING_3);
	
	
	//+++READ WORD 1+++//
	Scanner myReader9=new Scanner (WORD_1_FILE);
	while (myReader9.hasNextLine()) {
		RECYCABLE_STRING_4=myReader9.nextLine();
	}
	myReader9.close();
	
	
	//+++READ WORD 2+++//
	Scanner myReader10=new Scanner (WORD_2_FILE);
	while (myReader10.hasNextLine()) {
		RECYCABLE_STRING_5=myReader10.nextLine();
	}
	myReader10.close();
	
	
	//+++READ WORD 3+++//
	Scanner myReader11=new Scanner (WORD_3_FILE);
	while (myReader11.hasNextLine()) {
		RECYCABLE_STRING_6=myReader11.nextLine();
	}
	myReader11.close();
	
	
	
	
	
	RECYCABLE_STRING_4_LENGTH=RECYCABLE_STRING_4.length();
	RECYCABLE_STRING_5_LENGTH=RECYCABLE_STRING_5.length();
	
	RECYCABLE_INT_25=RECYCABLE_STRING_4_LENGTH+RECYCABLE_STRING_5_LENGTH+2;
	
	
	if (RECYCABLE_STRING_4.equalsIgnoreCase("BUILD") || RECYCABLE_STRING_4.equalsIgnoreCase("CREATE") || RECYCABLE_STRING_4.equalsIgnoreCase("DESIGN") && RECYCABLE_STRING_5.equals("A") || RECYCABLE_STRING_5.equalsIgnoreCase("AN")) {
		
		
		//+++READ EACH MAIN AND SUB DATA TYPE UNTIL WORD 3 MATCHES+++//
		
		File AI_LEARNED_FILE=new File(AI_LEARNED_MEMORY_DIRECTORY);
		String[] foldersInLearnedDir=AI_LEARNED_FILE.list();
		TOTAL_LEARNED_EXAMPLES_IN_MEMORY=foldersInLearnedDir.length;
		
		for (I=0;I<=TOTAL_LEARNED_EXAMPLES_IN_MEMORY;I++) {
			
			try {
			RECYCABLE_STRING_7=foldersInLearnedDir[I];
			} catch (ArrayIndexOutOfBoundsException a) {}
			
			RECYCABLE_STRING_8=RECYCABLE_STRING_7+"/Content Type.txt";
			RECYCABLE_STRING_9=RECYCABLE_STRING_7+"/Tags.txt";
			
			//+++CONTENT TYPE FILE DIRECTORY+++//
			RECYCABLE_STRING_10=AI_LEARNED_MEMORY_DIRECTORY+RECYCABLE_STRING_8;
			File RECYCABLE_STRING_10_FILE=new File(RECYCABLE_STRING_10);
			
			
			
			//+++TAGS FILE DIRECTORY+++//
			RECYCABLE_STRING_11=AI_LEARNED_MEMORY_DIRECTORY+RECYCABLE_STRING_9;
			File RECYCABLE_STRING_11_FILE=new File(RECYCABLE_STRING_11);
			
			
			
			//+++READ CONTENT TYPE+++//
			Scanner myReader12=new Scanner (RECYCABLE_STRING_10_FILE);
			while (myReader12.hasNextLine()) {
				RECYCABLE_STRING_12=myReader12.nextLine();
			}
			myReader12.close();
			//--------------------//
			
			
			
			
			try {
			RECYCABLE_STRING_23=DATA_CAPITALIZED.substring(DATA_LENGTH-1,DATA_LENGTH);
			} catch (StringIndexOutOfBoundsException e) {}
			
			
			if (RECYCABLE_STRING_23.equals(".") || RECYCABLE_STRING_23.equals("?") || RECYCABLE_STRING_23.equals(" ")) {
			
			try {
			RECYCABLE_STRING_22=DATA_CAPITALIZED.substring(RECYCABLE_INT_25,DATA_LENGTH-1);
			} catch (StringIndexOutOfBoundsException e) {}
			
			} 
			//+++END OF CONDITION+++//
			
			else {
				try {
					RECYCABLE_STRING_22=DATA_CAPITALIZED.substring(RECYCABLE_INT_25,DATA_LENGTH);
				} catch (StringIndexOutOfBoundsException e) {}
			}
			//+++END OF ELSE CONDITION+++//
			
			
			
			
			
			
			
			
			
			//+++READ TAGS+++//
			Scanner myReader13=new Scanner (RECYCABLE_STRING_11_FILE);
			while (myReader13.hasNextLine()) {
				RECYCABLE_STRING_13=myReader13.nextLine();
				
				
				//+++CHECK FOR A MATCH+++//
				if (RECYCABLE_STRING_13.equalsIgnoreCase(RECYCABLE_STRING_22)) {
					
					
					
					
					//+++GET FILENAME+++//
					RECYCABLE_STRING_14=AI_LEARNED_MEMORY_DIRECTORY+RECYCABLE_STRING_7+"/File Name.txt";
					File RECYCABLE_STRING_14_FILE=new File(RECYCABLE_STRING_14);


					Scanner myReader14=new Scanner (RECYCABLE_STRING_14_FILE);
					while (myReader14.hasNextLine()) {
						RECYCABLE_STRING_15=myReader14.nextLine();
					}
					myReader14.close();
					//-------------------//



					RECYCABLE_STRING_16=AI_LEARNED_MEMORY_DIRECTORY+RECYCABLE_STRING_7+"/"+RECYCABLE_STRING_15;


					//+++LIMIT RESULTS ONLY TO TEXT FOR NOW+++//
					if (RECYCABLE_STRING_12.equalsIgnoreCase("TEXT")) {
						RECYCABLE_STRING_19="ACCESS_GRANTED";
					}
					//----------------------------------------//
					
				}
				
				
			}
			myReader13.close();
			//-------------------//
			
			
			
			
			
			
			
			
			if (RECYCABLE_STRING_6.equalsIgnoreCase(RECYCABLE_STRING_13)) {
				
				
				//+++GET FILENAME+++//
				RECYCABLE_STRING_14=AI_LEARNED_MEMORY_DIRECTORY+RECYCABLE_STRING_7+"/File Name.txt";
				File RECYCABLE_STRING_14_FILE=new File(RECYCABLE_STRING_14);
				
				
				Scanner myReader14=new Scanner (RECYCABLE_STRING_14_FILE);
				while (myReader14.hasNextLine()) {
					RECYCABLE_STRING_15=myReader14.nextLine();
				}
				myReader14.close();
				//-------------------//
				
				
				
				RECYCABLE_STRING_16=AI_LEARNED_MEMORY_DIRECTORY+RECYCABLE_STRING_7+"/"+RECYCABLE_STRING_15;
				
	
				/*
				File RECYCABLE_STRING_16_FILE=new File(RECYCABLE_STRING_16);
				
				//+++READ LEARNED FILE MATCH+++//
				Scanner myReader15=new Scanner (RECYCABLE_STRING_16_FILE);
				while (myReader15.hasNextLine()) {
					RECYCABLE_STRING_17=myReader15.nextLine()+ENTER+RECYCABLE_STRING_17;
				}
				myReader15.close();
				//-----------------------------//
				
				
				
				
				//+++CORRECT DATA STRUCTURE+++//
				Scanner myReader16=new Scanner (RECYCABLE_STRING_17);
				while (myReader16.hasNextLine()) {
					RECYCABLE_STRING_18=myReader16.nextLine()+ENTER+RECYCABLE_STRING_18;
				}
				myReader16.close();
				//----------------------------//
				
				*/
				
				
				
				
				//+++LIMIT RESULTS ONLY TO TEXT FOR NOW+++//
				if (RECYCABLE_STRING_12.equalsIgnoreCase("TEXT")) {
				RECYCABLE_STRING_19="ACCESS_GRANTED";
				}
				//----------------------------------------//
				
				
				
			}
			//+++END OF CONDITION+++//
			
			
			
			
			
			
			
			
		}
		//+++END OF LOOP+++//
		
		
		
		
		
		
		
		//System.out.println(RECYCABLE_STRING_17);
		
		
		
		
		
		if (RECYCABLE_STRING_19.equals("ACCESS_GRANTED")) {
			
		File RECYCABLE_STRING_16_FILE=new File(RECYCABLE_STRING_16);

		//+++READ LEARNED FILE MATCH+++//
		Scanner myReader15=new Scanner (RECYCABLE_STRING_16_FILE);
		while (myReader15.hasNextLine()) {
			RECYCABLE_STRING_17=myReader15.nextLine()+ENTER+RECYCABLE_STRING_17;
		}
		myReader15.close();
		//-----------------------------//




		//+++CORRECT DATA STRUCTURE+++//
		Scanner myReader16=new Scanner (RECYCABLE_STRING_17);
		while (myReader16.hasNextLine()) {
			RECYCABLE_STRING_18=myReader16.nextLine()+ENTER+RECYCABLE_STRING_18;
		}
		myReader16.close();
		//----------------------------//

		
		
		
		System.out.println(RECYCABLE_STRING_18);
		
		
		
		
		}
	//+++END OF ACCESS GRANTED CONDITION+++//
		
		
		
		
	}
	//+++END OF CONDITION+++//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//++++++++++++++++++++++++++++++++++++//
	//+++END OF PROCESSING ACTION WORDS+++//
	//++++++++++++++++++++++++++++++++++++//
	
	//----------------------------------------------------------------------------------------------------------------------------------------------------------//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	//++++++++++++++++++++++++++++++++++++//
	//+++ARTIFICIAL INTELLIGENCE MEMORY+++//
	//++++++++++++++++++++++++++++++++++++//
	
	
	
	
	if (DATA_TYPE.equals("QUESTION")) {
		
		if (QUESTION_TYPE.equals("SINGLE_DEFINITION")) {
			RECYCABLE_STRING_1="SINGLE_DEFINITION";
		}
		
		if (QUESTION_TYPE.equals("CONTRASTING")) {
			RECYCABLE_STRING_1="CONTRASTING";
		}
		
		
		RECYCABLE_STRING_1_LENGTH=RECYCABLE_STRING_1.length();
		
	}
	//+++END OF CONDITION+++//
	
	
	
	
	
	//+++PREPARE DATA FOR MEMORY+++//
	
	if (RECYCABLE_STRING_1_LENGTH>0) {
	AI_MEMORY_DATA_TO_WRITE="DATE="+DATE+ENTER+"TIME="+TIME+ENTER+"DATA="+UNALTERED_DATA+ENTER+"DATA TYPE="+DATA_TYPE+ENTER+"SUB DATA TYPE="+RECYCABLE_STRING_1+ENTER+"DATA LENGTH="+DATA_LENGTH+ENTER;
	}
	
	if (RECYCABLE_STRING_1_LENGTH<=0) {
		AI_MEMORY_DATA_TO_WRITE="DATE="+DATE+ENTER+"TIME="+TIME+ENTER+"DATA="+UNALTERED_DATA+ENTER+"DATA TYPE="+DATA_TYPE+ENTER+"DATA LENGTH="+DATA_LENGTH+ENTER;
	}
	
	
	/*
	System.out.println("");
	System.out.println("");
	
	System.out.println("AI Data ready to be written:");
	System.out.println("----------------------------");
	System.out.println("");
	System.out.println(AI_MEMORY_DATA_TO_WRITE);
	
	System.out.println("");
	System.out.println("Writing to memory...");
	*/
	
	
	//+++WRITE DATA TO MEMORY+++//
	RECYCABLE_STRING_2=AI_MEMORY_FOLDER_DIRECTORY+"MEMORY.AI";
	RECYCABLE_STRING_3=AI_MEMORY_FOLDER_DIRECTORY+"MEMORY_SLOT_COUNT.AI";
	
	//+++DETERMINE IF MEMORY EXISTS+++//
	File DOES_MEMORY_EXIST= new File(RECYCABLE_STRING_2);
	File DOES_MEMORY_SLOT_EXIST=new File(RECYCABLE_STRING_3);
	
	
	//++++++++++++++++++++++//
	//+++IF MEMORY EXISTS+++//
	//++++++++++++++++++++++//
	
	if (DOES_MEMORY_EXIST.exists() && DOES_MEMORY_SLOT_EXIST.exists()) {
		
		//+++READ MEMORY FILE+++//
		
			File myObj=new File(RECYCABLE_STRING_2);	
			Scanner myReader=new Scanner (myObj);
			while (myReader.hasNextLine()) {
			
			RECYCABLE_STRING_4=myReader.nextLine()+ENTER+RECYCABLE_STRING_4;
				
			}
				myReader.close();
			
			
			AI_MEMORY_DATA=RECYCABLE_STRING_4+ENTER+AI_MEMORY_DATA_TO_WRITE+ENTER;
		
			
		
			
			
		//+++SAVE UPDATED DATA+++//
		
		try {
			FileWriter FILE_WRITER=new FileWriter(RECYCABLE_STRING_2);
			FILE_WRITER.write(AI_MEMORY_DATA);
			FILE_WRITER.close();
		}

		catch (IOException e) {}
		
		
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		
		
		//++++++++++++++++++//
		//+++MEMORY COUNT+++//
		//++++++++++++++++++//
		
		
		//+++READ MEMORY COUNT FILE+++//
		File myObj3=new File(RECYCABLE_STRING_3);	
		Scanner myReader3=new Scanner (myObj3);
		while (myReader3.hasNextLine()) {

			RECYCABLE_STRING_5=myReader3.nextLine();

		}
		myReader.close();
		
		
		
		//+++MAKE SURE THAT SOMETHING IS BEING CONVERTED TO AN INTEGER+++//
		RECYCABLE_STRING_5_LENGTH=RECYCABLE_STRING_5.length();
		
		if (RECYCABLE_STRING_5_LENGTH>=1) {
			
		//+++CONVERT MEMORY COUNT TO INTEGER+++//
		RECYCABLE_INT_1=Integer.parseInt(RECYCABLE_STRING_5);
		RECYCABLE_INT_2=RECYCABLE_INT_1+1;
		RECYCABLE_STRING_6=String.valueOf(RECYCABLE_INT_2);
		
		}
		//+++END OF CONDITION+++//


		
		//+++SAVE UPDATED NUMBER TO MEMORY SLOT COUNT FILE+++//
		try {
			FileWriter FILE_WRITER=new FileWriter(RECYCABLE_STRING_3);
			FILE_WRITER.write(RECYCABLE_STRING_6);
			FILE_WRITER.close();
		}

		catch (IOException e) {}
		
		
			
			
		
	}	
	//+++END OF MEMORY EXIST CONDITION+++//
	
	
	//------------------------------------------------------------------------------------------------------------------------//
	
	
	//+++++++++++++++++++++++++++++++++++++++//
	//+++IF MEMORY AND SLOT DOES NOT EXIST+++//
	//+++++++++++++++++++++++++++++++++++++++//
	
	else {
		
		//+++SAVE FIRST MEMORY STRING+++//
		try {
		FileWriter FILE_WRITER=new FileWriter(RECYCABLE_STRING_2);
		FILE_WRITER.write(AI_MEMORY_DATA_TO_WRITE);
		FILE_WRITER.close();
		}
		
		catch (IOException e) {}
	
		//---------------------------------------------------------------------------------------------------------------------//
		
		//+++SAVE THE FIRST MEMORY COUNT+++//
		try {
			FileWriter FILE_WRITER=new FileWriter(RECYCABLE_STRING_3);
			FILE_WRITER.write("1");
			FILE_WRITER.close();
		}

		catch (IOException e) {}
		
		
		
		
		
		
		
		
	//+++++++++++++++++++++++++++++++++++++++++++++++++//
	//+++VERIFY THAT THE FILE WAS SAVED SUCCESSFULLY+++//
	//+++++++++++++++++++++++++++++++++++++++++++++++++//	
	
	if (DOES_MEMORY_EXIST.exists()) {
		System.out.println("Data saved to memory successfully.");
	}
	
	else {
		System.out.println("An error has occured. Data has not been save to memory successfully. ");
	}
	//+++END OF CONDITION VERIFYING FILE SAVED SUCCESSFULLY+++//
		
	}
	//+++END OF IF MEMORY DOES NOT EXIST ELSE+++//
	
	
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++//
	//++++END OF ARTIFICIAL INTELLIGENCE MEMORY++++//
	//+++++++++++++++++++++++++++++++++++++++++++++//
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
	
	
	
	
	
	/*
	System.out.println(CONSOLE_SPACER_8);
	System.out.println("AI MEMORY DATA:");
	System.out.println("---------------");
	System.out.println();
	System.out.println(AI_MEMORY_DATA);
	*/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
		
		
		
	
	
	
		
		
		

		
	//-------------------------------------------------------------------------------------------//
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	if (MANUAL_CHAT_MODE.equalsIgnoreCase("ON")) {
	//+++++++++++++++++++++++++++++++++++++++++++++//
	//+++MANUAL INTERACTIVE CHAT SESSION FEATURE+++//
	//+++++++++++++++++++++++++++++++++++++++++++++//
	
	
	for (A=0;A<=100;A++) {
		
		System.out.println("On Standby :|");
		
		Scanner input_2 = new Scanner(System.in);
       	CHAT_DATA = input_2.nextLine();
		CHAT_DATA_LENGTH=CHAT_DATA.length();
		
		
		
		
		
	
	String[] InteractiveTextSessions=INTERACTIVE_FOLDER_DIRECTORY_FILE.list();
	TOTAL_INTERACTIVE_SESSIONS=InteractiveTextSessions.length;
	
	
	
	if (TOTAL_INTERACTIVE_SESSIONS>1) {
		//+++NO SUPPORT FOR MULTIPLE SESSIONS. NO SUPPORT FOR OPEN ENDED QUESTIONS+++//
	}
	//+++END OF CONDITION+++//
	
	
	
	
	
	
	if (TOTAL_INTERACTIVE_SESSIONS<=1) {
	
		CURRENT_INTERACTIVE_SESSION_FOLDER_DIRECTORY=INTERACTIVE_FOLDER_DIRECTORY+InteractiveTextSessions[0]+"/";
		
		File FILES_IN_CURRENT_SESSION_FOLDER_FILE=new File(CURRENT_INTERACTIVE_SESSION_FOLDER_DIRECTORY);
		String[] FilesInCurrentSession=FILES_IN_CURRENT_SESSION_FOLDER_FILE.list();
		TOTAL_INTERACTIVE_FILES=FilesInCurrentSession.length;
		
		TOTAL_INTERACTIVE_FILES_DIVIDED=TOTAL_INTERACTIVE_FILES/2;
		
		
		RECYCABLE_INT_1=0;
		
		
		
		
		for (I=1;I<=TOTAL_INTERACTIVE_FILES_DIVIDED;I++) {
			
			
			//if (CHAT_DATA_LENGTH) {
				
				
			INTERACTIVE_STATEMENT_FILE_NAME="Statement_"+I+".txt";
			INTERACTIVE_REPLY_FILE_NAME="Reply_"+I+".txt";
			
			INTERACTIVE_STATEMENT_FILE_DIRECTORY=CURRENT_INTERACTIVE_SESSION_FOLDER_DIRECTORY+INTERACTIVE_STATEMENT_FILE_NAME;
			INTERACTIVE_REPLY_FILE_DIRECTORY=CURRENT_INTERACTIVE_SESSION_FOLDER_DIRECTORY+INTERACTIVE_REPLY_FILE_NAME;
			
			File INTERACTIVE_STATEMENT_FILE_DIRECTORY_FILE=new File(INTERACTIVE_STATEMENT_FILE_DIRECTORY);
			File INTERACTIVE_REPLY_FILE_DIRECTORY_FILE=new File(INTERACTIVE_REPLY_FILE_DIRECTORY);
			
			
			//+++READ STATEMENT+++//
			Scanner myReader12=new Scanner (INTERACTIVE_STATEMENT_FILE_DIRECTORY_FILE);
			while (myReader12.hasNextLine()) {
				INTERACTIVE_STATEMENT_DATA=myReader12.nextLine();
				INTERACTIVE_STATEMENT_DATA_LENGTH=INTERACTIVE_STATEMENT_DATA.length();
				
				
				
				if (CHAT_DATA.equalsIgnoreCase(INTERACTIVE_STATEMENT_DATA)) {
					
					
					
					//+++READ REPLY STATEMENT+++//
					Scanner myReader13=new Scanner (INTERACTIVE_REPLY_FILE_DIRECTORY_FILE);
					while (myReader13.hasNextLine()) {
						INTERACTIVE_REPLY_DATA=myReader13.nextLine()+ENTER+INTERACTIVE_REPLY_DATA;
					}
					myReader13.close();
					//+++END OF FILE READING+++//	
					
					
					
					//+++CORRECT WORD FORMAT+++//
					Scanner myReader14=new Scanner (INTERACTIVE_REPLY_DATA);
					while (myReader14.hasNextLine()) {
						CORRECTED_INTERACTIVE_REPLY_DATA=myReader14.nextLine()+ENTER+CORRECTED_INTERACTIVE_REPLY_DATA;
					}
					myReader14.close();
					//+++END OF FILE READ
					
					
					
					
					
					
				}
				//+++END OF CONDITION+++//
				
				
				
				
			}
			myReader12.close();
			//+++END OF FILE READING+++//
			
			
			
			CHAT_DATA_LENGTH=0;
			//}
			//+++END OF CONDITION TO ACTIVATE PROCESSING STATEMENTS AND REPLIES+++//
			
			
			
			
		}
		//+++END OF LOOP+++//
		
	
		
		
		
		
		
	}
	//+++END OF CONDITION+++//
	
	
	RECYCABLE_STRING_1="";
	RECYCABLE_STRING_2="";
	
	//System.out.println(CORRECTED_INTERACTIVE_REPLY_DATA);
	
	for (B=0;B<=CORRECTED_INTERACTIVE_REPLY_DATA.length();B++) {
		
		
		
		//+++CLEAR SCREEN+++//
		System.out.println("\033[H\033[2J");
		System.out.flush();
		
		
		
		try {
		DETECT_1_CHAR=CORRECTED_INTERACTIVE_REPLY_DATA.substring(0,B+1);
		} catch (StringIndexOutOfBoundsException e) {}
		
		
		RECYCABLE_STRING_1=DETECT_1_CHAR;
		RECYCABLE_STRING_1_LENGTH=RECYCABLE_STRING_1.length();
		
		
		
		//+++SHOW CHAT REPLY+++//
		System.out.println(RECYCABLE_STRING_1);
		
		
		//System.out.println(CURRENT_INTERACTIVE_SESSION_FOLDER_DIRECTORY);
		//System.out.println("CHAT DATA="+CHAT_DATA);
		//System.out.println("CHAT DATA LENGTH="+CHAT_DATA_LENGTH);
		//System.out.println("STATEMENT DATA="+INTERACTIVE_STATEMENT_DATA);
		//System.out.println("STATEMENT DATA LENGTH="+INTERACTIVE_STATEMENT_DATA_LENGTH);
		
		
		
		
		try{
		Thread.sleep(100);
		} catch (InterruptedException i) {}
		
		
		CHAT_DATA="";
		CHAT_DATA_LENGTH=0;
		INTERACTIVE_STATEMENT_DATA="";
		INTERACTIVE_STATEMENT_DATA_LENGTH=0;
		
		
		
	}
	//+++END OF LOOP+++//
	
	
	
	
	
	
	
	//+++CLEAR VALUES+++//
	INTERACTIVE_REPLY_DATA="";
	CORRECTED_INTERACTIVE_REPLY_DATA="";
	
	
	
	
	
	
	}
	//+++END OF LOOP+++//
	
	
	
	
	
	
	}
	//++++++++++++++++++++++++++++++++++++++++++++++++++++//
	//+++END OF MANUAL INTERACTIVE CHAT SESSION FEATURE+++//
	//++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
	
	
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}	
	//++++++++++++++++++++++++++++++++++++++++++//
	//+++END OF CHARACTER VERIFICATION PASSED+++//
	//++++++++++++++++++++++++++++++++++++++++++//
		
		
		
	
	}
	}
	

